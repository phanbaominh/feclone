# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi hidden-definitions

# typed: autogenerated

class Addrinfo
  def connect_internal(local_addrinfo, timeout=T.unsafe(nil)); end
end

class Array
  include ::JSON::Ext::Generator::GeneratorMethods::Array
  def shelljoin(); end

  def to_h(); end
end

class Array
  def self.try_convert(_); end
end

class Arrow::Part
  def self.[](*_); end

  def self.members(); end
end

BasicObject::BasicObject = BasicObject

class BasicSocket
  def read_nonblock(len, str=T.unsafe(nil), exception: T.unsafe(nil)); end
end

class Benchmark::Job
  def initialize(width); end
end

class Benchmark::Report
  def initialize(width=T.unsafe(nil), format=T.unsafe(nil)); end
end

class Benchmark::Tms
  def to_a(); end
end

class BigDecimal
  def clone(); end
  EXCEPTION_NaN = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class BigDecimal
  def self.new(*args, **kwargs); end
end

class Binding
  def clone(); end

  def irb(); end
end

class Bundler::Dependency
  def branch(); end

  def expanded_platforms(); end

  def git(); end
end

Bundler::Deprecate = Gem::Deprecate

class Bundler::Env
end

class Bundler::Env
  def self.environment(); end

  def self.report(options=T.unsafe(nil)); end

  def self.write(io); end
end

class Bundler::Fetcher
  def fetch_spec(spec); end

  def fetchers(); end

  def http_proxy(); end

  def initialize(remote); end

  def specs(gem_names, source); end

  def specs_with_retry(gem_names, source); end

  def uri(); end

  def use_api(); end

  def user_agent(); end
  FAIL_ERRORS = ::T.let(nil, ::T.untyped)
  FETCHERS = ::T.let(nil, ::T.untyped)
  HTTP_ERRORS = ::T.let(nil, ::T.untyped)
  NET_ERRORS = ::T.let(nil, ::T.untyped)
end

class Bundler::Fetcher::AuthenticationRequiredError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::BadAuthenticationError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::Base
  def api_fetcher?(); end

  def available?(); end

  def display_uri(); end

  def downloader(); end

  def fetch_uri(); end

  def initialize(downloader, remote, display_uri); end

  def remote(); end

  def remote_uri(); end
end

class Bundler::Fetcher::Base
end

class Bundler::Fetcher::CertificateFailureError
  def initialize(remote_uri); end
end

class Bundler::Fetcher::CompactIndex
  def available?(*args, &blk); end

  def fetch_spec(*args, &blk); end

  def specs(*args, &blk); end

  def specs_for_names(gem_names); end
end

class Bundler::Fetcher::CompactIndex::ClientFetcher
  def call(path, headers); end

  def fetcher(); end

  def fetcher=(_); end

  def ui(); end

  def ui=(_); end
end

class Bundler::Fetcher::CompactIndex::ClientFetcher
  def self.[](*_); end

  def self.members(); end
end

class Bundler::Fetcher::CompactIndex
  def self.compact_index_request(method_name); end
end

class Bundler::Fetcher::Dependency
  def dependency_api_uri(gem_names=T.unsafe(nil)); end

  def dependency_specs(gem_names); end

  def get_formatted_specs_and_deps(gem_list); end

  def specs(gem_names, full_dependency_list=T.unsafe(nil), last_spec_list=T.unsafe(nil)); end

  def unmarshalled_dep_gems(gem_names); end
end

class Bundler::Fetcher::Dependency
end

class Bundler::Fetcher::Downloader
  def connection(); end

  def fetch(uri, headers=T.unsafe(nil), counter=T.unsafe(nil)); end

  def initialize(connection, redirect_limit); end

  def redirect_limit(); end

  def request(uri, headers); end
end

class Bundler::Fetcher::Downloader
end

class Bundler::Fetcher::Index
  def fetch_spec(spec); end

  def specs(_gem_names); end
end

class Bundler::Fetcher::Index
end

class Bundler::Fetcher::SSLError
  def initialize(msg=T.unsafe(nil)); end
end

class Bundler::Fetcher::TooManyRequestsError
end

class Bundler::Fetcher::TooManyRequestsError
end

class Bundler::Fetcher
  def self.api_timeout(); end

  def self.api_timeout=(api_timeout); end

  def self.disable_endpoint(); end

  def self.disable_endpoint=(disable_endpoint); end

  def self.max_retries(); end

  def self.max_retries=(max_retries); end

  def self.redirect_limit(); end

  def self.redirect_limit=(redirect_limit); end
end

module Bundler::FileUtils
  VERSION = ::T.let(nil, ::T.untyped)
end

class Bundler::FileUtils::Entry_
  def link(dest); end
end

module Bundler::FileUtils
  def self.cp_lr(src, dest, noop: T.unsafe(nil), verbose: T.unsafe(nil), dereference_root: T.unsafe(nil), remove_destination: T.unsafe(nil)); end

  def self.link_entry(src, dest, dereference_root=T.unsafe(nil), remove_destination=T.unsafe(nil)); end
end

class Bundler::GemHelper
  def allowed_push_host(); end

  def already_tagged?(); end

  def base(); end

  def build_gem(); end

  def built_gem_path(); end

  def clean?(); end

  def committed?(); end

  def gem_command(); end

  def gem_key(); end

  def gem_push?(); end

  def gem_push_host(); end

  def gemspec(); end

  def git_push(remote=T.unsafe(nil)); end

  def guard_clean(); end

  def initialize(base=T.unsafe(nil), name=T.unsafe(nil)); end

  def install(); end

  def install_gem(built_gem_path=T.unsafe(nil), local=T.unsafe(nil)); end

  def name(); end

  def perform_git_push(options=T.unsafe(nil)); end

  def rubygem_push(path); end

  def sh(cmd, &block); end

  def sh_with_input(cmd); end

  def sh_with_status(cmd, &block); end

  def spec_path(); end

  def tag_version(); end

  def version(); end

  def version_tag(); end
end

class Bundler::GemHelper
  def self.gemspec(&block); end

  def self.install_tasks(opts=T.unsafe(nil)); end

  def self.instance(); end

  def self.instance=(instance); end
end

class Bundler::GemVersionPromoter
  def initialize(locked_specs=T.unsafe(nil), unlock_gems=T.unsafe(nil)); end

  def level(); end

  def level=(value); end

  def locked_specs(); end

  def major?(); end

  def minor?(); end

  def prerelease_specified(); end

  def prerelease_specified=(prerelease_specified); end

  def sort_versions(dep, spec_groups); end

  def strict(); end

  def strict=(strict); end

  def unlock_gems(); end
  DEBUG = ::T.let(nil, ::T.untyped)
end

class Bundler::GemVersionPromoter
end

class Bundler::Graph
  def edge_options(); end

  def groups(); end

  def initialize(env, output_file, show_version=T.unsafe(nil), show_requirements=T.unsafe(nil), output_format=T.unsafe(nil), without=T.unsafe(nil)); end

  def node_options(); end

  def output_file(); end

  def output_format(); end

  def relations(); end

  def viz(); end
  GRAPH_NAME = ::T.let(nil, ::T.untyped)
end

class Bundler::Graph::GraphVizClient
  def g(); end

  def initialize(graph_instance); end

  def run(); end
end

class Bundler::Graph::GraphVizClient
end

class Bundler::Graph
end

class Bundler::Index
  include ::Enumerable
end

class Bundler::Injector
  def initialize(deps, options=T.unsafe(nil)); end

  def inject(gemfile_path, lockfile_path); end

  def remove(gemfile_path, lockfile_path); end
  INJECTED_GEMS = ::T.let(nil, ::T.untyped)
end

class Bundler::Injector
  def self.inject(new_deps, options=T.unsafe(nil)); end

  def self.remove(gems, options=T.unsafe(nil)); end
end

class Bundler::Installer
  def generate_bundler_executable_stubs(spec, options=T.unsafe(nil)); end

  def generate_standalone_bundler_executable_stubs(spec); end

  def initialize(root, definition); end

  def post_install_messages(); end

  def run(options); end
end

class Bundler::Installer
  def self.ambiguous_gems(); end

  def self.ambiguous_gems=(ambiguous_gems); end

  def self.install(root, definition, options=T.unsafe(nil)); end
end

class Bundler::Molinillo::DependencyGraph
  include ::Enumerable
end

class Bundler::Molinillo::DependencyGraph::Log
  extend ::Enumerable
end

class Bundler::Molinillo::DependencyGraph::Vertex
  def _recursive_predecessors(vertices=T.unsafe(nil)); end

  def _recursive_successors(vertices=T.unsafe(nil)); end
end

module Bundler::Plugin::API::Source
  def ==(other); end

  def app_cache_dirname(); end

  def app_cache_path(custom_path=T.unsafe(nil)); end

  def bundler_plugin_api_source?(); end

  def cache(spec, custom_path=T.unsafe(nil)); end

  def cached!(); end

  def can_lock?(spec); end

  def dependency_names(); end

  def dependency_names=(dependency_names); end

  def double_check_for(*_); end

  def eql?(other); end

  def fetch_gemspec_files(); end

  def gem_install_dir(); end

  def hash(); end

  def include?(other); end

  def initialize(opts); end

  def install(spec, opts); end

  def install_path(); end

  def installed?(); end

  def name(); end

  def options(); end

  def options_to_lock(); end

  def post_install(spec, disable_exts=T.unsafe(nil)); end

  def remote!(); end

  def root(); end

  def specs(); end

  def to_lock(); end

  def to_s(); end

  def unlock!(); end

  def unmet_deps(); end

  def uri(); end

  def uri_hash(); end
end

module Bundler::Plugin::API::Source
end

module Bundler::Plugin::Events
  GEM_AFTER_INSTALL = ::T.let(nil, ::T.untyped)
  GEM_AFTER_INSTALL_ALL = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_INSTALL = ::T.let(nil, ::T.untyped)
  GEM_BEFORE_INSTALL_ALL = ::T.let(nil, ::T.untyped)
end

class Bundler::Plugin::Index
  def installed_plugins(); end

  def plugin_commands(plugin); end
end

class Bundler::Plugin::Index::CommandConflict
  def initialize(plugin, commands); end
end

class Bundler::Plugin::Index::CommandConflict
end

class Bundler::Plugin::Index::SourceConflict
  def initialize(plugin, sources); end
end

class Bundler::Plugin::Index::SourceConflict
end

class Bundler::Plugin::Installer
  def install(names, options); end

  def install_definition(definition); end
end

class Bundler::Plugin::Installer::Git
  def generate_bin(spec, disable_extensions=T.unsafe(nil)); end
end

class Bundler::Plugin::Installer::Git
end

class Bundler::Plugin::Installer::Rubygems
end

class Bundler::Plugin::Installer::Rubygems
end

class Bundler::Plugin::Installer
end

class Bundler::Plugin::SourceList
end

class Bundler::Plugin::SourceList
end

module Bundler::Plugin
  def self.list(); end
end

class Bundler::ProcessLock
end

class Bundler::ProcessLock
  def self.lock(bundle_path=T.unsafe(nil)); end
end

class Bundler::Retry
  def attempt(&block); end

  def attempts(&block); end

  def current_run(); end

  def current_run=(current_run); end

  def initialize(name, exceptions=T.unsafe(nil), retries=T.unsafe(nil)); end

  def name(); end

  def name=(name); end

  def total_runs(); end

  def total_runs=(total_runs); end
end

class Bundler::Retry
  def self.attempts(); end

  def self.default_attempts(); end

  def self.default_retries(); end
end

class Bundler::RubyGemsGemInstaller
end

class Bundler::RubyGemsGemInstaller
end

class Bundler::RubygemsIntegration
  def add_to_load_path(paths); end

  def all_specs(); end

  def backport_ext_builder_monitor(); end

  def correct_for_windows_path(path); end

  def default_stubs(); end

  def find_name(name); end

  def gem_remote_fetcher(); end

  def plain_specs(); end

  def plain_specs=(specs); end

  def stub_rubygems(specs); end

  def use_gemdeps(gemfile); end
end

class Bundler::Settings::Mirror
  def ==(other); end

  def fallback_timeout(); end

  def fallback_timeout=(timeout); end

  def initialize(uri=T.unsafe(nil), fallback_timeout=T.unsafe(nil)); end

  def uri(); end

  def uri=(uri); end

  def valid?(); end

  def validate!(probe=T.unsafe(nil)); end
  DEFAULT_FALLBACK_TIMEOUT = ::T.let(nil, ::T.untyped)
end

class Bundler::Settings::Mirror
end

class Bundler::Settings::Mirrors
  def each(&blk); end

  def for(uri); end

  def initialize(prober=T.unsafe(nil)); end

  def parse(key, value); end
end

class Bundler::Settings::Mirrors
end

class Bundler::Settings::Validator
end

class Bundler::Settings::Validator::Rule
  def description(); end

  def fail!(key, value, *reasons); end

  def initialize(keys, description, &validate); end

  def k(key); end

  def set(settings, key, value, *reasons); end

  def validate!(key, value, settings); end
end

class Bundler::Settings::Validator::Rule
end

class Bundler::Settings::Validator
  def self.validate!(key, value, settings); end
end

class Bundler::Source::Git
  def glob(); end
end

class Bundler::SpecSet
  include ::Enumerable
end

class Bundler::Thor
  include ::Bundler::Thor::Base
  include ::Bundler::Thor::Invocation
  include ::Bundler::Thor::Shell
  def help(command=T.unsafe(nil), subcommand=T.unsafe(nil)); end
  HELP_MAPPINGS = ::T.let(nil, ::T.untyped)
  TEMPLATE_EXTNAME = ::T.let(nil, ::T.untyped)
  THOR_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

module Bundler::Thor::Actions
  def _cleanup_options_and_set(options, key); end

  def _shared_configuration(); end

  def action(instance); end

  def add_file(destination, *args, &block); end

  def add_link(destination, *args); end

  def append_file(path, *args, &block); end

  def append_to_file(path, *args, &block); end

  def apply(path, config=T.unsafe(nil)); end

  def behavior(); end

  def behavior=(behavior); end

  def chmod(path, mode, config=T.unsafe(nil)); end

  def comment_lines(path, flag, *args); end

  def copy_file(source, *args, &block); end

  def create_file(destination, *args, &block); end

  def create_link(destination, *args); end

  def destination_root(); end

  def destination_root=(root); end

  def directory(source, *args, &block); end

  def empty_directory(destination, config=T.unsafe(nil)); end

  def find_in_source_paths(file); end

  def get(source, *args, &block); end

  def gsub_file(path, flag, *args, &block); end

  def in_root(); end

  def initialize(args=T.unsafe(nil), options=T.unsafe(nil), config=T.unsafe(nil)); end

  def inject_into_class(path, klass, *args, &block); end

  def inject_into_file(destination, *args, &block); end

  def inject_into_module(path, module_name, *args, &block); end

  def insert_into_file(destination, *args, &block); end

  def inside(dir=T.unsafe(nil), config=T.unsafe(nil), &block); end

  def link_file(source, *args); end

  def prepend_file(path, *args, &block); end

  def prepend_to_file(path, *args, &block); end

  def relative_to_original_destination_root(path, remove_dot=T.unsafe(nil)); end

  def remove_dir(path, config=T.unsafe(nil)); end

  def remove_file(path, config=T.unsafe(nil)); end

  def run(command, config=T.unsafe(nil)); end

  def run_ruby_script(command, config=T.unsafe(nil)); end

  def source_paths(); end

  def template(source, *args, &block); end

  def thor(command, *args); end

  def uncomment_lines(path, flag, *args); end
  WARNINGS = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Actions::CapturableERB
end

class Bundler::Thor::Actions::CapturableERB
end

module Bundler::Thor::Actions::ClassMethods
  def add_runtime_options!(); end

  def source_paths(); end

  def source_paths_for_search(); end

  def source_root(path=T.unsafe(nil)); end
end

module Bundler::Thor::Actions::ClassMethods
end

class Bundler::Thor::Actions::CreateFile
  def data(); end

  def force_on_collision?(); end

  def force_or_skip_or_conflict(force, skip, &block); end

  def identical?(); end

  def initialize(base, destination, data, config=T.unsafe(nil)); end

  def on_conflict_behavior(&block); end

  def render(); end
end

class Bundler::Thor::Actions::CreateFile
end

class Bundler::Thor::Actions::CreateLink
end

class Bundler::Thor::Actions::CreateLink
end

class Bundler::Thor::Actions::Directory
  def execute!(); end

  def file_level_lookup(previous_lookup); end

  def files(lookup); end

  def initialize(base, source, destination=T.unsafe(nil), config=T.unsafe(nil), &block); end

  def source(); end
end

class Bundler::Thor::Actions::Directory
end

class Bundler::Thor::Actions::EmptyDirectory
  def base(); end

  def config(); end

  def convert_encoded_instructions(filename); end

  def destination(); end

  def destination=(destination); end

  def exists?(); end

  def given_destination(); end

  def initialize(base, destination, config=T.unsafe(nil)); end

  def invoke!(); end

  def invoke_with_conflict_check(&block); end

  def on_conflict_behavior(); end

  def on_file_clash_behavior(); end

  def pretend?(); end

  def relative_destination(); end

  def revoke!(); end

  def say_status(status, color); end
end

class Bundler::Thor::Actions::EmptyDirectory
end

class Bundler::Thor::Actions::InjectIntoFile
  def behavior(); end

  def flag(); end

  def initialize(base, destination, data, config); end

  def replace!(regexp, string, force); end

  def replacement(); end

  def say_status(behavior, warning: T.unsafe(nil), color: T.unsafe(nil)); end
end

class Bundler::Thor::Actions::InjectIntoFile
end

module Bundler::Thor::Actions
  def self.included(base); end
end

class Bundler::Thor::AmbiguousCommandError
end

class Bundler::Thor::AmbiguousCommandError
end

Bundler::Thor::AmbiguousTaskError = Bundler::Thor::AmbiguousCommandError

class Bundler::Thor::Argument
  def banner(); end

  def default(); end

  def default_banner(); end

  def description(); end

  def enum(); end

  def human_name(); end

  def initialize(name, options=T.unsafe(nil)); end

  def name(); end

  def required(); end

  def required?(); end

  def show_default?(); end

  def type(); end

  def usage(); end

  def valid_type?(type); end

  def validate!(); end
  VALID_TYPES = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Argument
end

class Bundler::Thor::Arguments
  def initialize(arguments=T.unsafe(nil)); end

  def parse(args); end

  def remaining(); end
  NUMERIC = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Arguments
  def self.parse(*args); end

  def self.split(args); end
end

module Bundler::Thor::Base
  def args(); end

  def args=(args); end

  def initialize(args=T.unsafe(nil), local_options=T.unsafe(nil), config=T.unsafe(nil)); end

  def options(); end

  def options=(options); end

  def parent_options(); end

  def parent_options=(parent_options); end
end

module Bundler::Thor::Base::ClassMethods
  def all_commands(); end

  def all_tasks(); end

  def allow_incompatible_default_type!(); end

  def argument(name, options=T.unsafe(nil)); end

  def arguments(); end

  def attr_accessor(*_); end

  def attr_reader(*_); end

  def attr_writer(*_); end

  def baseclass(); end

  def basename(); end

  def build_option(name, options, scope); end

  def build_options(options, scope); end

  def check_default_type(); end

  def check_default_type!(); end

  def check_unknown_options(); end

  def check_unknown_options!(); end

  def check_unknown_options?(config); end

  def class_option(name, options=T.unsafe(nil)); end

  def class_options(options=T.unsafe(nil)); end

  def class_options_help(shell, groups=T.unsafe(nil)); end

  def commands(); end

  def create_command(meth); end

  def create_task(meth); end

  def disable_required_check?(command_name); end

  def dispatch(command, given_args, given_opts, config); end

  def exit_on_failure?(); end

  def find_and_refresh_command(name); end

  def find_and_refresh_task(name); end

  def from_superclass(method, default=T.unsafe(nil)); end

  def group(name=T.unsafe(nil)); end

  def handle_argument_error(command, error, args, arity); end

  def handle_no_command_error(command, has_namespace=T.unsafe(nil)); end

  def handle_no_task_error(command, has_namespace=T.unsafe(nil)); end

  def inherited(klass); end

  def initialize_added(); end

  def is_thor_reserved_word?(word, type); end

  def method_added(meth); end

  def namespace(name=T.unsafe(nil)); end

  def no_commands(&block); end

  def no_commands?(); end

  def no_commands_context(); end

  def no_tasks(&block); end

  def print_options(shell, options, group_name=T.unsafe(nil)); end

  def public_command(*names); end

  def public_task(*names); end

  def remove_argument(*names); end

  def remove_class_option(*names); end

  def remove_command(*names); end

  def remove_task(*names); end

  def start(given_args=T.unsafe(nil), config=T.unsafe(nil)); end

  def stop_on_unknown_option?(command_name); end

  def strict_args_position(); end

  def strict_args_position!(); end

  def strict_args_position?(config); end

  def tasks(); end
end

module Bundler::Thor::Base::ClassMethods
end

module Bundler::Thor::Base
  def self.included(base); end

  def self.register_klass_file(klass); end

  def self.shell(); end

  def self.shell=(shell); end

  def self.subclass_files(); end

  def self.subclasses(); end
end

class Bundler::Thor::Command
  def formatted_usage(klass, namespace=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def handle_argument_error?(instance, error, caller); end

  def handle_no_method_error?(instance, error, caller); end

  def hidden?(); end

  def initialize(name, description, long_description, usage, options=T.unsafe(nil)); end

  def local_method?(instance, name); end

  def not_debugging?(instance); end

  def private_method?(instance); end

  def public_method?(instance); end

  def required_arguments_for(klass, usage); end

  def required_options(); end

  def run(instance, args=T.unsafe(nil)); end

  def sans_backtrace(backtrace, caller); end
  FILE_REGEXP = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Command
end

module Bundler::Thor::CoreExt
end

class Bundler::Thor::CoreExt::HashWithIndifferentAccess
  def [](key); end

  def []=(key, value); end

  def convert_key(key); end

  def delete(key); end

  def fetch(key, *args); end

  def initialize(hash=T.unsafe(nil)); end

  def key?(key); end

  def merge(other); end

  def merge!(other); end

  def method_missing(method, *args); end

  def replace(other_hash); end

  def reverse_merge(other); end

  def reverse_merge!(other_hash); end

  def values_at(*indices); end
end

class Bundler::Thor::CoreExt::HashWithIndifferentAccess
end

module Bundler::Thor::CoreExt
end

Bundler::Thor::Correctable = DidYouMean::Correctable

class Bundler::Thor::DynamicCommand
  def initialize(name, options=T.unsafe(nil)); end
end

class Bundler::Thor::DynamicCommand
end

Bundler::Thor::DynamicTask = Bundler::Thor::DynamicCommand

class Bundler::Thor::Error
end

class Bundler::Thor::Error
end

class Bundler::Thor::Group
  include ::Bundler::Thor::Base
  include ::Bundler::Thor::Invocation
  include ::Bundler::Thor::Shell
  def _invoke_for_class_method(klass, command=T.unsafe(nil), *args, &block); end
end

class Bundler::Thor::Group
  extend ::Bundler::Thor::Base::ClassMethods
  extend ::Bundler::Thor::Invocation::ClassMethods
  def self.banner(); end

  def self.desc(description=T.unsafe(nil)); end

  def self.get_options_from_invocations(group_options, base_options); end

  def self.handle_argument_error(command, error, _args, arity); end

  def self.help(shell); end

  def self.invocation_blocks(); end

  def self.invocations(); end

  def self.invoke(*names, &block); end

  def self.invoke_from_option(*names, &block); end

  def self.printable_commands(*_); end

  def self.printable_tasks(*_); end

  def self.remove_invocation(*names); end

  def self.self_command(); end

  def self.self_task(); end
end

class Bundler::Thor::HiddenCommand
end

class Bundler::Thor::HiddenCommand
end

Bundler::Thor::HiddenTask = Bundler::Thor::HiddenCommand

module Bundler::Thor::Invocation
  def _parse_initialization_options(args, opts, config); end

  def _retrieve_class_and_command(name, sent_command=T.unsafe(nil)); end

  def _retrieve_class_and_task(name, sent_command=T.unsafe(nil)); end

  def _shared_configuration(); end

  def current_command_chain(); end

  def initialize(args=T.unsafe(nil), options=T.unsafe(nil), config=T.unsafe(nil), &block); end

  def invoke(name=T.unsafe(nil), *args); end

  def invoke_all(); end

  def invoke_command(command, *args); end

  def invoke_task(command, *args); end

  def invoke_with_padding(*args); end
end

module Bundler::Thor::Invocation::ClassMethods
  def prepare_for_invocation(key, name); end
end

module Bundler::Thor::Invocation::ClassMethods
end

module Bundler::Thor::Invocation
  def self.included(base); end
end

class Bundler::Thor::InvocationError
end

class Bundler::Thor::InvocationError
end

module Bundler::Thor::LineEditor
end

class Bundler::Thor::LineEditor::Basic
  def initialize(prompt, options); end

  def options(); end

  def prompt(); end

  def readline(); end
end

class Bundler::Thor::LineEditor::Basic
  def self.available?(); end
end

class Bundler::Thor::LineEditor::Readline
end

class Bundler::Thor::LineEditor::Readline::PathCompletion
  def initialize(text); end

  def matches(); end
end

class Bundler::Thor::LineEditor::Readline::PathCompletion
end

class Bundler::Thor::LineEditor::Readline
end

module Bundler::Thor::LineEditor
  def self.best_available(); end

  def self.readline(prompt, options=T.unsafe(nil)); end
end

class Bundler::Thor::MalformattedArgumentError
end

class Bundler::Thor::MalformattedArgumentError
end

class Bundler::Thor::NestedContext
  def enter(); end

  def entered?(); end
end

class Bundler::Thor::NestedContext
end

class Bundler::Thor::NoKwargSpellChecker
  def initialize(dictionary); end
end

class Bundler::Thor::NoKwargSpellChecker
end

class Bundler::Thor::Option
  def aliases(); end

  def array?(); end

  def boolean?(); end

  def dasherize(str); end

  def dasherized?(); end

  def group(); end

  def hash?(); end

  def hide(); end

  def lazy_default(); end

  def numeric?(); end

  def repeatable(); end

  def string?(); end

  def switch_name(); end

  def undasherize(str); end

  def usage(padding=T.unsafe(nil)); end

  def validate_default_type!(); end
  VALID_TYPES = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Option
  def self.parse(key, value); end
end

class Bundler::Thor::Options
  def assign_result!(option, result); end

  def check_unknown!(); end

  def current_is_switch?(); end

  def current_is_switch_formatted?(); end

  def initialize(hash_options=T.unsafe(nil), defaults=T.unsafe(nil), stop_on_unknown=T.unsafe(nil), disable_required_check=T.unsafe(nil)); end

  def normalize_switch(arg); end

  def parse_boolean(switch); end

  def parse_peek(switch, option); end

  def parsing_options?(); end

  def switch?(arg); end

  def switch_option(arg); end
  EQ_RE = ::T.let(nil, ::T.untyped)
  LONG_RE = ::T.let(nil, ::T.untyped)
  OPTS_END = ::T.let(nil, ::T.untyped)
  SHORT_NUM = ::T.let(nil, ::T.untyped)
  SHORT_RE = ::T.let(nil, ::T.untyped)
  SHORT_SQ_RE = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Options
  def self.to_switches(options); end
end

class Bundler::Thor::RequiredArgumentMissingError
end

class Bundler::Thor::RequiredArgumentMissingError
end

module Bundler::Thor::Sandbox
end

module Bundler::Thor::Sandbox
end

module Bundler::Thor::Shell
  def _shared_configuration(); end

  def ask(*args, &block); end

  def error(*args, &block); end

  def file_collision(*args, &block); end

  def initialize(args=T.unsafe(nil), options=T.unsafe(nil), config=T.unsafe(nil)); end

  def no?(*args, &block); end

  def print_in_columns(*args, &block); end

  def print_table(*args, &block); end

  def print_wrapped(*args, &block); end

  def say(*args, &block); end

  def say_status(*args, &block); end

  def set_color(*args, &block); end

  def shell(); end

  def shell=(shell); end

  def terminal_width(*args, &block); end

  def with_padding(); end

  def yes?(*args, &block); end
  SHELL_DELEGATED_METHODS = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Shell::Basic
  def answer_match(possibilities, answer, case_insensitive); end

  def as_unicode(); end

  def ask(statement, *args); end

  def ask_filtered(statement, color, options); end

  def ask_simply(statement, color, options); end

  def base(); end

  def base=(base); end

  def can_display_colors?(); end

  def dynamic_width(); end

  def dynamic_width_stty(); end

  def dynamic_width_tput(); end

  def error(statement); end

  def file_collision(destination); end

  def file_collision_help(); end

  def git_merge_tool(); end

  def indent(count=T.unsafe(nil)); end

  def is?(value); end

  def lookup_color(color); end

  def merge(destination, content); end

  def merge_tool(); end

  def mute(); end

  def mute?(); end

  def no?(statement, color=T.unsafe(nil)); end

  def padding(); end

  def padding=(value); end

  def prepare_message(message, *color); end

  def print_in_columns(array); end

  def print_table(array, options=T.unsafe(nil)); end

  def print_wrapped(message, options=T.unsafe(nil)); end

  def quiet?(); end

  def say(message=T.unsafe(nil), color=T.unsafe(nil), force_new_line=T.unsafe(nil)); end

  def say_status(status, message, log_status=T.unsafe(nil)); end

  def set_color(string, *_); end

  def show_diff(destination, content); end

  def stderr(); end

  def stdout(); end

  def terminal_width(); end

  def truncate(string, width); end

  def unix?(); end

  def yes?(statement, color=T.unsafe(nil)); end
  DEFAULT_TERMINAL_WIDTH = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Shell::Basic
end

class Bundler::Thor::Shell::Color
  def are_colors_disabled?(); end

  def diff_lcs_loaded?(); end

  def output_diff_line(diff); end

  def set_color(string, *colors); end
  BLACK = ::T.let(nil, ::T.untyped)
  BLUE = ::T.let(nil, ::T.untyped)
  BOLD = ::T.let(nil, ::T.untyped)
  CLEAR = ::T.let(nil, ::T.untyped)
  CYAN = ::T.let(nil, ::T.untyped)
  GREEN = ::T.let(nil, ::T.untyped)
  MAGENTA = ::T.let(nil, ::T.untyped)
  ON_BLACK = ::T.let(nil, ::T.untyped)
  ON_BLUE = ::T.let(nil, ::T.untyped)
  ON_CYAN = ::T.let(nil, ::T.untyped)
  ON_GREEN = ::T.let(nil, ::T.untyped)
  ON_MAGENTA = ::T.let(nil, ::T.untyped)
  ON_RED = ::T.let(nil, ::T.untyped)
  ON_WHITE = ::T.let(nil, ::T.untyped)
  ON_YELLOW = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
  WHITE = ::T.let(nil, ::T.untyped)
  YELLOW = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Shell::Color
end

class Bundler::Thor::Shell::HTML
  def ask(statement, color=T.unsafe(nil)); end

  def diff_lcs_loaded?(); end

  def output_diff_line(diff); end

  def set_color(string, *colors); end
  BLACK = ::T.let(nil, ::T.untyped)
  BLUE = ::T.let(nil, ::T.untyped)
  BOLD = ::T.let(nil, ::T.untyped)
  CYAN = ::T.let(nil, ::T.untyped)
  GREEN = ::T.let(nil, ::T.untyped)
  MAGENTA = ::T.let(nil, ::T.untyped)
  ON_BLACK = ::T.let(nil, ::T.untyped)
  ON_BLUE = ::T.let(nil, ::T.untyped)
  ON_CYAN = ::T.let(nil, ::T.untyped)
  ON_GREEN = ::T.let(nil, ::T.untyped)
  ON_MAGENTA = ::T.let(nil, ::T.untyped)
  ON_RED = ::T.let(nil, ::T.untyped)
  ON_WHITE = ::T.let(nil, ::T.untyped)
  ON_YELLOW = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
  WHITE = ::T.let(nil, ::T.untyped)
  YELLOW = ::T.let(nil, ::T.untyped)
end

class Bundler::Thor::Shell::HTML
end

module Bundler::Thor::Shell
end

Bundler::Thor::Task = Bundler::Thor::Command

class Bundler::Thor::UndefinedCommandError
  include ::DidYouMean::Correctable
  def all_commands(); end

  def command(); end

  def initialize(command, all_commands, namespace); end
end

class Bundler::Thor::UndefinedCommandError::SpellChecker
  def corrections(); end

  def error(); end

  def initialize(error); end

  def spell_checker(); end
end

class Bundler::Thor::UndefinedCommandError::SpellChecker
end

class Bundler::Thor::UndefinedCommandError
end

Bundler::Thor::UndefinedTaskError = Bundler::Thor::UndefinedCommandError

class Bundler::Thor::UnknownArgumentError
  include ::DidYouMean::Correctable
  def initialize(switches, unknown); end

  def switches(); end

  def unknown(); end
end

class Bundler::Thor::UnknownArgumentError::SpellChecker
  def corrections(); end

  def error(); end

  def initialize(error); end

  def spell_checker(); end
end

class Bundler::Thor::UnknownArgumentError::SpellChecker
end

class Bundler::Thor::UnknownArgumentError
end

module Bundler::Thor::Util
end

module Bundler::Thor::Util
  def self.camel_case(str); end

  def self.escape_globs(path); end

  def self.escape_html(string); end

  def self.find_by_namespace(namespace); end

  def self.find_class_and_command_by_namespace(namespace, fallback=T.unsafe(nil)); end

  def self.find_class_and_task_by_namespace(namespace, fallback=T.unsafe(nil)); end

  def self.globs_for(path); end

  def self.load_thorfile(path, content=T.unsafe(nil), debug=T.unsafe(nil)); end

  def self.namespace_from_thor_class(constant); end

  def self.namespaces_in_content(contents, file=T.unsafe(nil)); end

  def self.ruby_command(); end

  def self.snake_case(str); end

  def self.thor_classes_in(klass); end

  def self.thor_root(); end

  def self.thor_root_glob(); end

  def self.user_home(); end
end

class Bundler::Thor
  extend ::Bundler::Thor::Base::ClassMethods
  extend ::Bundler::Thor::Invocation::ClassMethods
  def self.banner(command, namespace=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def self.check_unknown_options!(options=T.unsafe(nil)); end

  def self.command_help(shell, command_name); end

  def self.default_command(meth=T.unsafe(nil)); end

  def self.default_task(meth=T.unsafe(nil)); end

  def self.deprecation_warning(message); end

  def self.desc(usage, description, options=T.unsafe(nil)); end

  def self.disable_required_check(); end

  def self.disable_required_check!(*command_names); end

  def self.disable_required_check?(command); end

  def self.dispatch(meth, given_args, given_opts, config); end

  def self.dynamic_command_class(); end

  def self.find_command_possibilities(meth); end

  def self.find_task_possibilities(meth); end

  def self.help(shell, subcommand=T.unsafe(nil)); end

  def self.long_desc(long_description, options=T.unsafe(nil)); end

  def self.map(mappings=T.unsafe(nil), **kw); end

  def self.method_option(name, options=T.unsafe(nil)); end

  def self.method_options(options=T.unsafe(nil)); end

  def self.normalize_command_name(meth); end

  def self.normalize_task_name(meth); end

  def self.option(name, options=T.unsafe(nil)); end

  def self.options(options=T.unsafe(nil)); end

  def self.package_name(name, _=T.unsafe(nil)); end

  def self.printable_commands(all=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def self.printable_tasks(all=T.unsafe(nil), subcommand=T.unsafe(nil)); end

  def self.register(klass, subcommand_name, usage, description, options=T.unsafe(nil)); end

  def self.retrieve_command_name(args); end

  def self.retrieve_task_name(args); end

  def self.stop_on_unknown_option(); end

  def self.stop_on_unknown_option!(*command_names); end

  def self.stop_on_unknown_option?(command); end

  def self.subcommand(subcommand, subcommand_class); end

  def self.subcommand_classes(); end

  def self.subcommand_help(cmd); end

  def self.subcommands(); end

  def self.subtask(subcommand, subcommand_class); end

  def self.subtask_help(cmd); end

  def self.subtasks(); end

  def self.task_help(shell, command_name); end
end

class Bundler::UI::Shell
  def add_color(string, *color); end

  def ask(msg); end

  def confirm(msg, newline=T.unsafe(nil)); end

  def debug(msg, newline=T.unsafe(nil)); end

  def debug?(); end

  def error(msg, newline=T.unsafe(nil)); end

  def info(msg, newline=T.unsafe(nil)); end

  def initialize(options=T.unsafe(nil)); end

  def level(name=T.unsafe(nil)); end

  def level=(level); end

  def no?(); end

  def quiet?(); end

  def shell=(shell); end

  def silence(&blk); end

  def trace(e, newline=T.unsafe(nil), force=T.unsafe(nil)); end

  def unprinted_warnings(); end

  def warn(msg, newline=T.unsafe(nil)); end

  def yes?(msg); end
  LEVELS = ::T.let(nil, ::T.untyped)
end

class Bundler::UI::Shell
end

module Bundler::URI
  include ::Bundler::URI::RFC2396_REGEXP
  ABS_PATH = ::T.let(nil, ::T.untyped)
  ABS_URI = ::T.let(nil, ::T.untyped)
  ABS_URI_REF = ::T.let(nil, ::T.untyped)
  DEFAULT_PARSER = ::T.let(nil, ::T.untyped)
  ESCAPED = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  OPAQUE = ::T.let(nil, ::T.untyped)
  PORT = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  REGISTRY = ::T.let(nil, ::T.untyped)
  REL_PATH = ::T.let(nil, ::T.untyped)
  REL_URI = ::T.let(nil, ::T.untyped)
  REL_URI_REF = ::T.let(nil, ::T.untyped)
  RFC3986_PARSER = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  TBLDECWWWCOMP_ = ::T.let(nil, ::T.untyped)
  TBLENCWWWCOMP_ = ::T.let(nil, ::T.untyped)
  UNSAFE = ::T.let(nil, ::T.untyped)
  URI_REF = ::T.let(nil, ::T.untyped)
  USERINFO = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  VERSION_CODE = ::T.let(nil, ::T.untyped)
  WEB_ENCODINGS_ = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::BadURIError
end

class Bundler::URI::BadURIError
end

class Bundler::URI::Error
end

class Bundler::URI::Error
end

module Bundler::URI::Escape
  def decode(*arg); end

  def encode(*arg); end

  def escape(*arg); end

  def unescape(*arg); end
end

module Bundler::URI::Escape
end

class Bundler::URI::FTP
  def set_typecode(v); end

  def typecode(); end

  def typecode=(typecode); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  TYPECODE = ::T.let(nil, ::T.untyped)
  TYPECODE_PREFIX = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::FTP
  def self.new2(user, password, host, port, path, typecode=T.unsafe(nil), arg_check=T.unsafe(nil)); end
end

class Bundler::URI::File
  def check_password(user); end

  def check_user(user); end

  def check_userinfo(user); end

  def set_userinfo(v); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::File
end

class Bundler::URI::Generic
  include ::Bundler::URI
  include ::Bundler::URI::RFC2396_REGEXP
  def +(oth); end

  def -(oth); end

  def ==(oth); end

  def absolute(); end

  def absolute?(); end

  def coerce(oth); end

  def component(); end

  def component_ary(); end

  def default_port(); end

  def eql?(oth); end

  def find_proxy(env=T.unsafe(nil)); end

  def fragment(); end

  def fragment=(v); end

  def hierarchical?(); end

  def host(); end

  def host=(v); end

  def hostname(); end

  def hostname=(v); end

  def initialize(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser=T.unsafe(nil), arg_check=T.unsafe(nil)); end

  def merge(oth); end

  def merge!(oth); end

  def normalize(); end

  def normalize!(); end

  def opaque(); end

  def opaque=(v); end

  def parser(); end

  def password(); end

  def password=(password); end

  def path(); end

  def path=(v); end

  def port(); end

  def port=(v); end

  def query(); end

  def query=(v); end

  def registry(); end

  def registry=(v); end

  def relative?(); end

  def route_from(oth); end

  def route_to(oth); end

  def scheme(); end

  def scheme=(v); end

  def select(*components); end

  def set_host(v); end

  def set_opaque(v); end

  def set_password(v); end

  def set_path(v); end

  def set_port(v); end

  def set_registry(v); end

  def set_scheme(v); end

  def set_user(v); end

  def set_userinfo(user, password=T.unsafe(nil)); end

  def user(); end

  def user=(user); end

  def userinfo(); end

  def userinfo=(userinfo); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  USE_REGISTRY = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::Generic
  def self.build(args); end

  def self.build2(args); end

  def self.component(); end

  def self.default_port(); end

  def self.use_proxy?(hostname, addr, port, no_proxy); end

  def self.use_registry(); end
end

class Bundler::URI::HTTP
  def request_uri(); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::HTTP
end

class Bundler::URI::HTTPS
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::HTTPS
end

class Bundler::URI::InvalidComponentError
end

class Bundler::URI::InvalidComponentError
end

class Bundler::URI::InvalidURIError
end

class Bundler::URI::InvalidURIError
end

class Bundler::URI::LDAP
  def attributes(); end

  def attributes=(val); end

  def dn(); end

  def dn=(val); end

  def extensions(); end

  def extensions=(val); end

  def filter(); end

  def filter=(val); end

  def initialize(*arg); end

  def scope(); end

  def scope=(val); end

  def set_attributes(val); end

  def set_dn(val); end

  def set_extensions(val); end

  def set_filter(val); end

  def set_scope(val); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  SCOPE = ::T.let(nil, ::T.untyped)
  SCOPE_BASE = ::T.let(nil, ::T.untyped)
  SCOPE_ONE = ::T.let(nil, ::T.untyped)
  SCOPE_SUB = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::LDAP
end

class Bundler::URI::LDAPS
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::LDAPS
end

class Bundler::URI::MailTo
  def headers(); end

  def headers=(v); end

  def initialize(*arg); end

  def set_headers(v); end

  def set_to(v); end

  def to(); end

  def to=(v); end

  def to_mailtext(); end

  def to_rfc822text(); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
  EMAIL_REGEXP = ::T.let(nil, ::T.untyped)
  HEADER_REGEXP = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::MailTo
end

Bundler::URI::Parser = Bundler::URI::RFC2396_Parser

Bundler::URI::REGEXP = Bundler::URI::RFC2396_REGEXP

class Bundler::URI::RFC2396_Parser
  include ::Bundler::URI::RFC2396_REGEXP
  def escape(str, unsafe=T.unsafe(nil)); end

  def extract(str, schemes=T.unsafe(nil)); end

  def initialize(opts=T.unsafe(nil)); end

  def join(*uris); end

  def make_regexp(schemes=T.unsafe(nil)); end

  def parse(uri); end

  def pattern(); end

  def regexp(); end

  def split(uri); end

  def unescape(str, escaped=T.unsafe(nil)); end
end

class Bundler::URI::RFC2396_Parser
end

module Bundler::URI::RFC2396_REGEXP
end

module Bundler::URI::RFC2396_REGEXP::PATTERN
  ABS_PATH = ::T.let(nil, ::T.untyped)
  ABS_URI = ::T.let(nil, ::T.untyped)
  ALNUM = ::T.let(nil, ::T.untyped)
  ALPHA = ::T.let(nil, ::T.untyped)
  DOMLABEL = ::T.let(nil, ::T.untyped)
  ESCAPED = ::T.let(nil, ::T.untyped)
  FRAGMENT = ::T.let(nil, ::T.untyped)
  HEX = ::T.let(nil, ::T.untyped)
  HIER_PART = ::T.let(nil, ::T.untyped)
  HOST = ::T.let(nil, ::T.untyped)
  HOSTNAME = ::T.let(nil, ::T.untyped)
  HOSTPORT = ::T.let(nil, ::T.untyped)
  IPV4ADDR = ::T.let(nil, ::T.untyped)
  IPV6ADDR = ::T.let(nil, ::T.untyped)
  IPV6REF = ::T.let(nil, ::T.untyped)
  NET_PATH = ::T.let(nil, ::T.untyped)
  OPAQUE_PART = ::T.let(nil, ::T.untyped)
  PATH_SEGMENTS = ::T.let(nil, ::T.untyped)
  PORT = ::T.let(nil, ::T.untyped)
  QUERY = ::T.let(nil, ::T.untyped)
  REG_NAME = ::T.let(nil, ::T.untyped)
  REL_PATH = ::T.let(nil, ::T.untyped)
  REL_SEGMENT = ::T.let(nil, ::T.untyped)
  REL_URI = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  SCHEME = ::T.let(nil, ::T.untyped)
  TOPLABEL = ::T.let(nil, ::T.untyped)
  UNRESERVED = ::T.let(nil, ::T.untyped)
  URIC = ::T.let(nil, ::T.untyped)
  URIC_NO_SLASH = ::T.let(nil, ::T.untyped)
  URI_REF = ::T.let(nil, ::T.untyped)
  USERINFO = ::T.let(nil, ::T.untyped)
  X_ABS_URI = ::T.let(nil, ::T.untyped)
  X_REL_URI = ::T.let(nil, ::T.untyped)
end

module Bundler::URI::RFC2396_REGEXP::PATTERN
end

module Bundler::URI::RFC2396_REGEXP
end

class Bundler::URI::RFC3986_Parser
  def join(*uris); end

  def parse(uri); end

  def regexp(); end

  def split(uri); end
  RFC3986_URI = ::T.let(nil, ::T.untyped)
  RFC3986_relative_ref = ::T.let(nil, ::T.untyped)
end

class Bundler::URI::RFC3986_Parser
end

module Bundler::URI::Util
end

module Bundler::URI::Util
  def self.make_components_hash(klass, array_hash); end
end

module Bundler::URI
  extend ::Bundler::URI::Escape
  def self.decode_www_form(str, enc=T.unsafe(nil), separator: T.unsafe(nil), use__charset_: T.unsafe(nil), isindex: T.unsafe(nil)); end

  def self.decode_www_form_component(str, enc=T.unsafe(nil)); end

  def self.encode_www_form(enum, enc=T.unsafe(nil)); end

  def self.encode_www_form_component(str, enc=T.unsafe(nil)); end

  def self.extract(str, schemes=T.unsafe(nil), &block); end

  def self.get_encoding(label); end

  def self.join(*str); end

  def self.parse(uri); end

  def self.regexp(schemes=T.unsafe(nil)); end

  def self.scheme_list(); end

  def self.split(uri); end
end

module Bundler::VersionRanges
end

class Bundler::VersionRanges::NEq
  def version(); end

  def version=(_); end
end

class Bundler::VersionRanges::NEq
  def self.[](*_); end

  def self.members(); end
end

class Bundler::VersionRanges::ReqR
  def cover?(v); end

  def empty?(); end

  def left(); end

  def left=(_); end

  def right(); end

  def right=(_); end

  def single?(); end
  INFINITY = ::T.let(nil, ::T.untyped)
  UNIVERSAL = ::T.let(nil, ::T.untyped)
  ZERO = ::T.let(nil, ::T.untyped)
end

class Bundler::VersionRanges::ReqR::Endpoint
  def inclusive(); end

  def inclusive=(_); end

  def version(); end

  def version=(_); end
end

class Bundler::VersionRanges::ReqR::Endpoint
  def self.[](*_); end

  def self.members(); end
end

class Bundler::VersionRanges::ReqR
  def self.[](*_); end

  def self.members(); end
end

module Bundler::VersionRanges
  def self.empty?(ranges, neqs); end

  def self.for(requirement); end

  def self.for_many(requirements); end
end

module Bundler
  def self.original_exec(*args); end

  def self.original_system(*args); end

  def self.unbundled_env(); end

  def self.unbundled_exec(*args); end

  def self.unbundled_system(*args); end

  def self.with_unbundled_env(); end
end

module CGI::HtmlExtension
  def a(href=T.unsafe(nil)); end

  def base(href=T.unsafe(nil)); end

  def blockquote(cite=T.unsafe(nil)); end

  def caption(align=T.unsafe(nil)); end

  def checkbox(name=T.unsafe(nil), value=T.unsafe(nil), checked=T.unsafe(nil)); end

  def checkbox_group(name=T.unsafe(nil), *values); end

  def file_field(name=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def form(method=T.unsafe(nil), action=T.unsafe(nil), enctype=T.unsafe(nil)); end

  def hidden(name=T.unsafe(nil), value=T.unsafe(nil)); end

  def html(attributes=T.unsafe(nil)); end

  def image_button(src=T.unsafe(nil), name=T.unsafe(nil), alt=T.unsafe(nil)); end

  def img(src=T.unsafe(nil), alt=T.unsafe(nil), width=T.unsafe(nil), height=T.unsafe(nil)); end

  def multipart_form(action=T.unsafe(nil), enctype=T.unsafe(nil)); end

  def password_field(name=T.unsafe(nil), value=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def popup_menu(name=T.unsafe(nil), *values); end

  def radio_button(name=T.unsafe(nil), value=T.unsafe(nil), checked=T.unsafe(nil)); end

  def radio_group(name=T.unsafe(nil), *values); end

  def reset(value=T.unsafe(nil), name=T.unsafe(nil)); end

  def scrolling_list(name=T.unsafe(nil), *values); end

  def submit(value=T.unsafe(nil), name=T.unsafe(nil)); end

  def text_field(name=T.unsafe(nil), value=T.unsafe(nil), size=T.unsafe(nil), maxlength=T.unsafe(nil)); end

  def textarea(name=T.unsafe(nil), cols=T.unsafe(nil), rows=T.unsafe(nil)); end
end

module CGI::HtmlExtension
end

class Class
  def json_creatable?(); end
end

module CodeRay
  CODERAY_PATH = ::T.let(nil, ::T.untyped)
  TokenKinds = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class CodeRay::Encoders::Encoder
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

CodeRay::Encoders::Encoder::PLUGIN_HOST = CodeRay::Encoders

class CodeRay::Encoders::HTML
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  FILE_EXTENSION = ::T.let(nil, ::T.untyped)
  HTML_ESCAPE = ::T.let(nil, ::T.untyped)
  HTML_ESCAPE_PATTERN = ::T.let(nil, ::T.untyped)
  TOKEN_KIND_TO_INFO = ::T.let(nil, ::T.untyped)
  TRANSPARENT_TOKEN_KINDS = ::T.let(nil, ::T.untyped)
end

class CodeRay::Encoders::HTML::CSS
  CSS_CLASS_PATTERN = ::T.let(nil, ::T.untyped)
end

module CodeRay::Encoders::HTML::Output
  DIV = ::T.let(nil, ::T.untyped)
  PAGE = ::T.let(nil, ::T.untyped)
  SPAN = ::T.let(nil, ::T.untyped)
  TABLE = ::T.let(nil, ::T.untyped)
end

class CodeRay::Encoders::Terminal
  TOKEN_COLORS = ::T.let(nil, ::T.untyped)
end

module CodeRay::FileType
  TypeFromExt = ::T.let(nil, ::T.untyped)
  TypeFromName = ::T.let(nil, ::T.untyped)
  TypeFromShebang = ::T.let(nil, ::T.untyped)
end

module CodeRay::PluginHost
  PLUGIN_HOSTS = ::T.let(nil, ::T.untyped)
  PLUGIN_HOSTS_BY_ID = ::T.let(nil, ::T.untyped)
end

class CodeRay::Scanners::Java
  CONSTANTS = ::T.let(nil, ::T.untyped)
  DIRECTIVES = ::T.let(nil, ::T.untyped)
  ESCAPE = ::T.let(nil, ::T.untyped)
  IDENT = ::T.let(nil, ::T.untyped)
  IDENT_KIND = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  MAGIC_VARIABLES = ::T.let(nil, ::T.untyped)
  RESERVED = ::T.let(nil, ::T.untyped)
  STRING_CONTENT_PATTERN = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
  UNICODE_ESCAPE = ::T.let(nil, ::T.untyped)
end

module CodeRay::Scanners::Java::BuiltinTypes
  List = ::T.let(nil, ::T.untyped)
end

module CodeRay::Scanners::Ruby::Patterns
  BINARY = ::T.let(nil, ::T.untyped)
  CHARACTER = ::T.let(nil, ::T.untyped)
  CLASS_VARIABLE = ::T.let(nil, ::T.untyped)
  CONTROL_META_ESCAPE = ::T.let(nil, ::T.untyped)
  DATA = ::T.let(nil, ::T.untyped)
  DECIMAL = ::T.let(nil, ::T.untyped)
  ESCAPE = ::T.let(nil, ::T.untyped)
  EXPONENT = ::T.let(nil, ::T.untyped)
  FANCY_STRING_INTERPRETED = ::T.let(nil, ::T.untyped)
  FANCY_STRING_KIND = ::T.let(nil, ::T.untyped)
  FANCY_STRING_START = ::T.let(nil, ::T.untyped)
  FLOAT_OR_INT = ::T.let(nil, ::T.untyped)
  FLOAT_SUFFIX = ::T.let(nil, ::T.untyped)
  GLOBAL_VARIABLE = ::T.let(nil, ::T.untyped)
  HEREDOC_OPEN = ::T.let(nil, ::T.untyped)
  HEXADECIMAL = ::T.let(nil, ::T.untyped)
  IDENT = ::T.let(nil, ::T.untyped)
  IDENT_KIND = ::T.let(nil, ::T.untyped)
  INSTANCE_VARIABLE = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  KEYWORDS_EXPECTING_VALUE = ::T.let(nil, ::T.untyped)
  KEYWORD_NEW_STATE = ::T.let(nil, ::T.untyped)
  METHOD_AFTER_DOT = ::T.let(nil, ::T.untyped)
  METHOD_NAME = ::T.let(nil, ::T.untyped)
  METHOD_NAME_EX = ::T.let(nil, ::T.untyped)
  METHOD_NAME_OPERATOR = ::T.let(nil, ::T.untyped)
  METHOD_NAME_OR_SYMBOL = ::T.let(nil, ::T.untyped)
  METHOD_SUFFIX = ::T.let(nil, ::T.untyped)
  NUMERIC = ::T.let(nil, ::T.untyped)
  OBJECT_VARIABLE = ::T.let(nil, ::T.untyped)
  OCTAL = ::T.let(nil, ::T.untyped)
  PREDEFINED_CONSTANTS = ::T.let(nil, ::T.untyped)
  PREFIX_VARIABLE = ::T.let(nil, ::T.untyped)
  QUOTE_TO_TYPE = ::T.let(nil, ::T.untyped)
  REGEXP_MODIFIERS = ::T.let(nil, ::T.untyped)
  RUBYDOC = ::T.let(nil, ::T.untyped)
  RUBYDOC_OR_DATA = ::T.let(nil, ::T.untyped)
  SIMPLE_ESCAPE = ::T.let(nil, ::T.untyped)
  SYMBOL = ::T.let(nil, ::T.untyped)
  VALUE_FOLLOWS = ::T.let(nil, ::T.untyped)
  VARIABLE = ::T.let(nil, ::T.untyped)
end

class CodeRay::Scanners::Ruby::StringState
  CLOSING_PAREN = ::T.let(nil, ::T.untyped)
  STRING_PATTERN = ::T.let(nil, ::T.untyped)
end

class CodeRay::Scanners::Scanner
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  KINDS_NOT_LOC = ::T.let(nil, ::T.untyped)
  SCANNER_STATE_INFO = ::T.let(nil, ::T.untyped)
  SCAN_ERROR_MESSAGE = ::T.let(nil, ::T.untyped)
end

CodeRay::Scanners::Scanner::PLUGIN_HOST = CodeRay::Scanners

class CodeRay::Styles::Style
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

CodeRay::Styles::Style::PLUGIN_HOST = CodeRay::Styles

class Date::Infinity
  def initialize(d=T.unsafe(nil)); end
end

class Delegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class DidYouMean::ClassNameChecker
  def class_name(); end

  def class_names(); end

  def corrections(); end

  def initialize(exception); end

  def scopes(); end
end

module DidYouMean::Correctable
  def corrections(); end

  def original_message(); end

  def spell_checker(); end

  def to_s(); end
end

module DidYouMean::Jaro
  def self.distance(str1, str2); end
end

module DidYouMean::JaroWinkler
  def self.distance(str1, str2); end
end

class DidYouMean::KeyErrorChecker
  def corrections(); end

  def initialize(key_error); end
end

class DidYouMean::KeyErrorChecker
end

module DidYouMean::Levenshtein
  def self.distance(str1, str2); end

  def self.min3(a, b, c); end
end

class DidYouMean::MethodNameChecker
  def corrections(); end

  def initialize(exception); end

  def method_name(); end

  def method_names(); end

  def receiver(); end
  RB_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

class DidYouMean::NullChecker
  def corrections(); end

  def initialize(*_); end
end

class DidYouMean::PlainFormatter
  def message_for(corrections); end
end

class DidYouMean::PlainFormatter
end

class DidYouMean::VariableNameChecker
  def corrections(); end

  def cvar_names(); end

  def initialize(exception); end

  def ivar_names(); end

  def lvar_names(); end

  def method_names(); end

  def name(); end
  RB_RESERVED_WORDS = ::T.let(nil, ::T.untyped)
end

module DidYouMean
  def self.formatter(); end

  def self.formatter=(formatter); end
end

class Dir
  def children(); end

  def each_child(); end
end

class Dir
  def self.exists?(_); end

end

class ERB
  def def_method(mod, methodname, fname=T.unsafe(nil)); end

  def def_module(methodname=T.unsafe(nil)); end

end

class ERB::Compiler::Scanner
  DEFAULT_ETAGS = ::T.let(nil, ::T.untyped)
  DEFAULT_STAGS = ::T.let(nil, ::T.untyped)
end

class Encoding
  def _dump(*_); end
end

class Encoding::Converter
  def initialize(*_); end
end

class Encoding
  def self._load(_); end
end

module Enumerable
  def chain(*_); end

  def sum(*_); end
end

class Enumerator
  def +(_); end

  def each_with_index(); end
end

class Enumerator::ArithmeticSequence
  def begin(); end

  def each(&blk); end

  def end(); end

  def exclude_end?(); end

  def last(*_); end

  def step(); end
end

class Enumerator::ArithmeticSequence
end

class Enumerator::Chain
end

class Enumerator::Chain
end

class Enumerator::Generator
  def each(*_, &blk); end

  def initialize(*_); end
end

Errno::EAUTH = Errno::NOERROR

Errno::EBADARCH = Errno::NOERROR

Errno::EBADEXEC = Errno::NOERROR

Errno::EBADMACHO = Errno::NOERROR

Errno::EBADRPC = Errno::NOERROR

Errno::ECAPMODE = Errno::NOERROR

Errno::EDEADLOCK = Errno::EDEADLK

Errno::EDEVERR = Errno::NOERROR

Errno::EDOOFUS = Errno::NOERROR

Errno::EFTYPE = Errno::NOERROR

Errno::EIPSEC = Errno::NOERROR

Errno::ELAST = Errno::NOERROR

Errno::ENEEDAUTH = Errno::NOERROR

Errno::ENOATTR = Errno::NOERROR

Errno::ENOPOLICY = Errno::NOERROR

Errno::ENOTCAPABLE = Errno::NOERROR

class Errno::ENOTSUP
  Errno = ::T.let(nil, ::T.untyped)
end

class Errno::ENOTSUP
end

Errno::EPROCLIM = Errno::NOERROR

Errno::EPROCUNAVAIL = Errno::NOERROR

Errno::EPROGMISMATCH = Errno::NOERROR

Errno::EPROGUNAVAIL = Errno::NOERROR

Errno::EPWROFF = Errno::NOERROR

Errno::EQFULL = Errno::NOERROR

Errno::ERPCMISMATCH = Errno::NOERROR

Errno::ESHLIBVERS = Errno::NOERROR

class Etc::Group
  def gid(); end

  def gid=(_); end

  def mem(); end

  def mem=(_); end

  def name(); end

  def name=(_); end

  def passwd(); end

  def passwd=(_); end
end

class Etc::Group
  extend ::Enumerable
  def self.[](*_); end

  def self.each(&blk); end

  def self.members(); end
end

class Etc::Passwd
  def dir=(_); end

  def gecos(); end

  def gecos=(_); end

  def gid=(_); end

  def name=(_); end

  def passwd=(_); end

  def shell=(_); end

  def uid=(_); end
end

class Etc::Passwd
  extend ::Enumerable
  def self.[](*_); end

  def self.each(&blk); end

  def self.members(); end
end

class ExitCalledError
end

class ExitCalledError
end

class FalseClass
  include ::JSON::Ext::Generator::GeneratorMethods::FalseClass
end

class File
  def self.exists?(_); end
end

module FileUtils
  include ::FileUtils::StreamUtils_
end

module FileUtils::DryRun
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  include ::FileUtils::LowMethods
end

module FileUtils::DryRun
  extend ::FileUtils::DryRun
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils::LowMethods
end

module FileUtils::NoWrite
  include ::FileUtils
  include ::FileUtils::StreamUtils_
  include ::FileUtils::LowMethods
end

module FileUtils::NoWrite
  extend ::FileUtils::NoWrite
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
  extend ::FileUtils::LowMethods
end

module FileUtils::Verbose
  include ::FileUtils
  include ::FileUtils::StreamUtils_
end

module FileUtils::Verbose
  extend ::FileUtils::Verbose
  extend ::FileUtils
  extend ::FileUtils::StreamUtils_
end

module FileUtils
  extend ::FileUtils::StreamUtils_
end

class Float
  include ::JSON::Ext::Generator::GeneratorMethods::Float
end

module Forwardable
  VERSION = ::T.let(nil, ::T.untyped)
end

module Forwardable
  def self._compile_method(src, file, line); end

  def self._delegator_method(obj, accessor, method, ali); end

  def self._valid_method?(method); end

  def self.debug(); end

  def self.debug=(debug); end
end

module GC
  def garbage_collect(*_); end
end

module GC
  def self.verify_transient_heap_internal_consistency(); end
end

module Gem
  ConfigMap = ::T.let(nil, ::T.untyped)
  RbConfigPriorities = ::T.let(nil, ::T.untyped)
  RubyGemsVersion = ::T.let(nil, ::T.untyped)
  UNTAINT = ::T.let(nil, ::T.untyped)
end

class Gem::Exception
  extend ::Gem::Deprecate
end

class Gem::Ext::BuildError
end

class Gem::Ext::BuildError
end

class Gem::Ext::ExtConfBuilder
end

Gem::Ext::ExtConfBuilder::FileEntry = FileUtils::Entry_

class Gem::Ext::ExtConfBuilder
  def self.build(extension, dest_path, results, args=T.unsafe(nil), lib_dir=T.unsafe(nil)); end

  def self.get_relative_path(path); end
end

class Gem::Package
  def gem(); end
end

class Gem::Package::DigestIO
  def digests(); end

  def initialize(io, digests); end

  def write(data); end
end

class Gem::Package::DigestIO
  def self.wrap(io, digests); end
end

class Gem::Package::FileSource
  def initialize(path); end

  def path(); end

  def present?(); end

  def start(); end

  def with_read_io(&block); end

  def with_write_io(&block); end
end

class Gem::Package::FileSource
end

class Gem::Package::IOSource
  def initialize(io); end

  def io(); end

  def path(); end

  def present?(); end

  def start(); end

  def with_read_io(); end

  def with_write_io(); end
end

class Gem::Package::IOSource
end

class Gem::Package::Old
  def extract_files(destination_dir); end

  def file_list(io); end

  def read_until_dashes(io); end

  def skip_ruby(io); end
end

class Gem::Package::Old
end

class Gem::Package::Source
end

class Gem::Package::Source
end

class Gem::Package::TarHeader
  def ==(other); end

  def checksum(); end

  def devmajor(); end

  def devminor(); end

  def empty?(); end

  def gid(); end

  def gname(); end

  def initialize(vals); end

  def linkname(); end

  def magic(); end

  def mode(); end

  def mtime(); end

  def name(); end

  def prefix(); end

  def size(); end

  def typeflag(); end

  def uid(); end

  def uname(); end

  def update_checksum(); end

  def version(); end
  EMPTY_HEADER = ::T.let(nil, ::T.untyped)
  FIELDS = ::T.let(nil, ::T.untyped)
  PACK_FORMAT = ::T.let(nil, ::T.untyped)
  UNPACK_FORMAT = ::T.let(nil, ::T.untyped)
end

class Gem::Package::TarHeader
  def self.from(stream); end

  def self.oct_or_256based(str); end

  def self.strict_oct(str); end
end

class Gem::Package::TarReader::Entry
  def bytes_read(); end

  def check_closed(); end

  def close(); end

  def closed?(); end

  def directory?(); end

  def eof?(); end

  def file?(); end

  def full_name(); end

  def getc(); end

  def header(); end

  def initialize(header, io); end

  def length(); end

  def pos(); end

  def read(len=T.unsafe(nil)); end

  def readpartial(maxlen=T.unsafe(nil), outbuf=T.unsafe(nil)); end

  def rewind(); end

  def size(); end

  def symlink?(); end
end

class Gem::Package::TarReader::Entry
end

class Gem::Package::TarReader
  def self.new(io); end
end

class Gem::Package::TarWriter
  def self.new(io); end
end

class Gem::Package
  def self.new(gem, security_policy=T.unsafe(nil)); end

  def self.raw_spec(path, security_policy=T.unsafe(nil)); end
end

class Gem::PathSupport
  def home(); end

  def initialize(env); end

  def path(); end

  def spec_cache_dir(); end
end

class Gem::RemoteFetcher::FetchError
  include ::Gem::UriParsing
  def initialize(message, uri); end

  def uri(); end

  def uri=(uri); end
end

class Gem::RemoteFetcher::FetchError
end

class Gem::RemoteFetcher::UnknownHostError
end

class Gem::RemoteFetcher::UnknownHostError
end

class Gem::Request
  extend ::Gem::UserInteraction
  extend ::Gem::DefaultUserInteraction
  extend ::Gem::Text
end

class Gem::Resolver::CurrentSet
end

class Gem::Resolver::CurrentSet
end

class Gem::Resolver::LocalSpecification
end

class Gem::Resolver::LocalSpecification
end

class Gem::Resolver::Molinillo::DependencyGraph::Log
  def add_edge_no_circular(graph, origin, destination, requirement); end

  def add_vertex(graph, name, payload, root); end

  def delete_edge(graph, origin_name, destination_name, requirement); end

  def detach_vertex_named(graph, name); end

  def each(&blk); end

  def pop!(graph); end

  def reverse_each(); end

  def rewind_to(graph, tag); end

  def set_payload(graph, name, payload); end

  def tag(graph, tag); end
end

class Gem::Resolver::Molinillo::DependencyGraph::Log
  extend ::Enumerable
end

class Gem::RuntimeRequirementNotMetError
  def suggestion(); end

  def suggestion=(suggestion); end
end

class Gem::RuntimeRequirementNotMetError
end

class Gem::Security::Exception
end

class Gem::Security::Exception
end

Gem::Security::KEY_ALGORITHM = OpenSSL::PKey::RSA

class Gem::Security::Policy
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def check_cert(signer, issuer, time); end

  def check_chain(chain, time); end

  def check_data(public_key, digest, signature, data); end

  def check_key(signer, key); end

  def check_root(chain, time); end

  def check_trust(chain, digester, trust_dir); end

  def initialize(name, policy=T.unsafe(nil), opt=T.unsafe(nil)); end

  def name(); end

  def only_signed(); end

  def only_signed=(only_signed); end

  def only_trusted(); end

  def only_trusted=(only_trusted); end

  def subject(certificate); end

  def verify(chain, key=T.unsafe(nil), digests=T.unsafe(nil), signatures=T.unsafe(nil), full_name=T.unsafe(nil)); end

  def verify_chain(); end

  def verify_chain=(verify_chain); end

  def verify_data(); end

  def verify_data=(verify_data); end

  def verify_root(); end

  def verify_root=(verify_root); end

  def verify_signatures(spec, digests, signatures); end

  def verify_signer(); end

  def verify_signer=(verify_signer); end
end

class Gem::Security::Policy
end

class Gem::Security::Signer
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def cert_chain(); end

  def cert_chain=(cert_chain); end

  def digest_algorithm(); end

  def digest_name(); end

  def extract_name(cert); end

  def initialize(key, cert_chain, passphrase=T.unsafe(nil), options=T.unsafe(nil)); end

  def key(); end

  def key=(key); end

  def load_cert_chain(); end

  def options(); end

  def re_sign_key(expiration_length: T.unsafe(nil)); end

  def sign(data); end
end

class Gem::Security::Signer
  def self.re_sign_cert(expired_cert, expired_cert_path, private_key); end
end

class Gem::Security::TrustDir
  def cert_path(certificate); end

  def dir(); end

  def each_certificate(); end

  def initialize(dir, permissions=T.unsafe(nil)); end

  def issuer_of(certificate); end

  def load_certificate(certificate_file); end

  def name_path(name); end

  def trust_cert(certificate); end

  def verify(); end
end

module Gem::Security
  def self.alt_name_or_x509_entry(certificate, x509_entry); end

  def self.create_cert(subject, key, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.create_cert_email(email, key, age=T.unsafe(nil), extensions=T.unsafe(nil)); end

  def self.create_cert_self_signed(subject, key, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.create_key(length=T.unsafe(nil), algorithm=T.unsafe(nil)); end

  def self.email_to_name(email_address); end

  def self.re_sign(expired_certificate, private_key, age=T.unsafe(nil), extensions=T.unsafe(nil)); end

  def self.reset(); end

  def self.sign(certificate, signing_key, signing_cert, age=T.unsafe(nil), extensions=T.unsafe(nil), serial=T.unsafe(nil)); end

  def self.trust_dir(); end

  def self.trusted_certificates(&block); end

  def self.write(pemmable, path, permissions=T.unsafe(nil), passphrase=T.unsafe(nil), cipher=T.unsafe(nil)); end
end

class Gem::SpecFetcher
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def available_specs(type); end

  def detect(type=T.unsafe(nil)); end

  def initialize(sources=T.unsafe(nil)); end

  def latest_specs(); end

  def prerelease_specs(); end

  def search_for_dependency(dependency, matching_platform=T.unsafe(nil)); end

  def sources(); end

  def spec_for_dependency(dependency, matching_platform=T.unsafe(nil)); end

  def specs(); end

  def suggest_gems_from_name(gem_name, type=T.unsafe(nil)); end

  def tuples_for(source, type, gracefully_ignore=T.unsafe(nil)); end
end

class Gem::SpecFetcher
  def self.fetcher(); end

  def self.fetcher=(fetcher); end
end

class Gem::Specification
  include ::Bundler::MatchPlatform
  include ::Bundler::GemHelpers
  def removed_method_calls(); end

  def to_ruby(); end
  REMOVED_METHODS = ::T.let(nil, ::T.untyped)
end

class Gem::Specification
  extend ::Gem::Deprecate
  extend ::Enumerable
end

class Gem::SpecificationPolicy
  include ::Gem::UserInteraction
  include ::Gem::DefaultUserInteraction
  include ::Gem::Text
  def initialize(specification); end

  def packaging(); end

  def packaging=(packaging); end

  def validate(strict=T.unsafe(nil)); end

  def validate_dependencies(); end

  def validate_metadata(); end

  def validate_permissions(); end
  HOMEPAGE_URI_PATTERN = ::T.let(nil, ::T.untyped)
  LAZY = ::T.let(nil, ::T.untyped)
  LAZY_PATTERN = ::T.let(nil, ::T.untyped)
  METADATA_LINK_KEYS = ::T.let(nil, ::T.untyped)
  SPECIAL_CHARACTERS = ::T.let(nil, ::T.untyped)
  VALID_NAME_PATTERN = ::T.let(nil, ::T.untyped)
  VALID_URI_PATTERN = ::T.let(nil, ::T.untyped)
end

class Gem::SpecificationPolicy
end

class Gem::StreamUI
  def _deprecated_debug(statement); end
end

class Gem::StubSpecification
  def build_extensions(); end

  def extensions(); end

  def initialize(filename, base_dir, gems_dir, default_gem); end

  def missing_extensions?(); end

  def valid?(); end
end

class Gem::StubSpecification::StubLine
  def extensions(); end

  def full_name(); end

  def initialize(data, extensions); end

  def name(); end

  def platform(); end

  def require_paths(); end

  def version(); end
end

class Gem::StubSpecification
  def self.default_gemspec_stub(filename, base_dir, gems_dir); end

  def self.gemspec_stub(filename, base_dir, gems_dir); end
end

class Gem::UninstallError
  def spec(); end

  def spec=(spec); end
end

class Gem::UninstallError
end

Gem::UnsatisfiableDepedencyError = Gem::UnsatisfiableDependencyError

Gem::Version::Requirement = Gem::Requirement

module Gosu
  DEPRECATION_STACKTRACE_LINES = ::T.let(nil, ::T.untyped)
  GP_0_BUTTON_0 = ::T.let(nil, ::T.untyped)
  GP_0_BUTTON_1 = ::T.let(nil, ::T.untyped)
  GP_0_BUTTON_10 = ::T.let(nil, ::T.untyped)
  GP_0_BUTTON_11 = ::T.let(nil, ::T.untyped)
  GP_0_BUTTON_12 = ::T.let(nil, ::T.untyped)
  GP_0_BUTTON_13 = ::T.let(nil, ::T.untyped)
  GP_0_BUTTON_14 = ::T.let(nil, ::T.untyped)
  GP_0_BUTTON_15 = ::T.let(nil, ::T.untyped)
  GP_0_BUTTON_2 = ::T.let(nil, ::T.untyped)
  GP_0_BUTTON_3 = ::T.let(nil, ::T.untyped)
  GP_0_BUTTON_4 = ::T.let(nil, ::T.untyped)
  GP_0_BUTTON_5 = ::T.let(nil, ::T.untyped)
  GP_0_BUTTON_6 = ::T.let(nil, ::T.untyped)
  GP_0_BUTTON_7 = ::T.let(nil, ::T.untyped)
  GP_0_BUTTON_8 = ::T.let(nil, ::T.untyped)
  GP_0_BUTTON_9 = ::T.let(nil, ::T.untyped)
  GP_0_DOWN = ::T.let(nil, ::T.untyped)
  GP_0_LEFT = ::T.let(nil, ::T.untyped)
  GP_0_RIGHT = ::T.let(nil, ::T.untyped)
  GP_0_UP = ::T.let(nil, ::T.untyped)
  GP_1_BUTTON_0 = ::T.let(nil, ::T.untyped)
  GP_1_BUTTON_1 = ::T.let(nil, ::T.untyped)
  GP_1_BUTTON_10 = ::T.let(nil, ::T.untyped)
  GP_1_BUTTON_11 = ::T.let(nil, ::T.untyped)
  GP_1_BUTTON_12 = ::T.let(nil, ::T.untyped)
  GP_1_BUTTON_13 = ::T.let(nil, ::T.untyped)
  GP_1_BUTTON_14 = ::T.let(nil, ::T.untyped)
  GP_1_BUTTON_15 = ::T.let(nil, ::T.untyped)
  GP_1_BUTTON_2 = ::T.let(nil, ::T.untyped)
  GP_1_BUTTON_3 = ::T.let(nil, ::T.untyped)
  GP_1_BUTTON_4 = ::T.let(nil, ::T.untyped)
  GP_1_BUTTON_5 = ::T.let(nil, ::T.untyped)
  GP_1_BUTTON_6 = ::T.let(nil, ::T.untyped)
  GP_1_BUTTON_7 = ::T.let(nil, ::T.untyped)
  GP_1_BUTTON_8 = ::T.let(nil, ::T.untyped)
  GP_1_BUTTON_9 = ::T.let(nil, ::T.untyped)
  GP_1_DOWN = ::T.let(nil, ::T.untyped)
  GP_1_LEFT = ::T.let(nil, ::T.untyped)
  GP_1_RIGHT = ::T.let(nil, ::T.untyped)
  GP_1_UP = ::T.let(nil, ::T.untyped)
  GP_2_BUTTON_0 = ::T.let(nil, ::T.untyped)
  GP_2_BUTTON_1 = ::T.let(nil, ::T.untyped)
  GP_2_BUTTON_10 = ::T.let(nil, ::T.untyped)
  GP_2_BUTTON_11 = ::T.let(nil, ::T.untyped)
  GP_2_BUTTON_12 = ::T.let(nil, ::T.untyped)
  GP_2_BUTTON_13 = ::T.let(nil, ::T.untyped)
  GP_2_BUTTON_14 = ::T.let(nil, ::T.untyped)
  GP_2_BUTTON_15 = ::T.let(nil, ::T.untyped)
  GP_2_BUTTON_2 = ::T.let(nil, ::T.untyped)
  GP_2_BUTTON_3 = ::T.let(nil, ::T.untyped)
  GP_2_BUTTON_4 = ::T.let(nil, ::T.untyped)
  GP_2_BUTTON_5 = ::T.let(nil, ::T.untyped)
  GP_2_BUTTON_6 = ::T.let(nil, ::T.untyped)
  GP_2_BUTTON_7 = ::T.let(nil, ::T.untyped)
  GP_2_BUTTON_8 = ::T.let(nil, ::T.untyped)
  GP_2_BUTTON_9 = ::T.let(nil, ::T.untyped)
  GP_2_DOWN = ::T.let(nil, ::T.untyped)
  GP_2_LEFT = ::T.let(nil, ::T.untyped)
  GP_2_RIGHT = ::T.let(nil, ::T.untyped)
  GP_2_UP = ::T.let(nil, ::T.untyped)
  GP_3_BUTTON_0 = ::T.let(nil, ::T.untyped)
  GP_3_BUTTON_1 = ::T.let(nil, ::T.untyped)
  GP_3_BUTTON_10 = ::T.let(nil, ::T.untyped)
  GP_3_BUTTON_11 = ::T.let(nil, ::T.untyped)
  GP_3_BUTTON_12 = ::T.let(nil, ::T.untyped)
  GP_3_BUTTON_13 = ::T.let(nil, ::T.untyped)
  GP_3_BUTTON_14 = ::T.let(nil, ::T.untyped)
  GP_3_BUTTON_15 = ::T.let(nil, ::T.untyped)
  GP_3_BUTTON_2 = ::T.let(nil, ::T.untyped)
  GP_3_BUTTON_3 = ::T.let(nil, ::T.untyped)
  GP_3_BUTTON_4 = ::T.let(nil, ::T.untyped)
  GP_3_BUTTON_5 = ::T.let(nil, ::T.untyped)
  GP_3_BUTTON_6 = ::T.let(nil, ::T.untyped)
  GP_3_BUTTON_7 = ::T.let(nil, ::T.untyped)
  GP_3_BUTTON_8 = ::T.let(nil, ::T.untyped)
  GP_3_BUTTON_9 = ::T.let(nil, ::T.untyped)
  GP_3_DOWN = ::T.let(nil, ::T.untyped)
  GP_3_LEFT = ::T.let(nil, ::T.untyped)
  GP_3_RIGHT = ::T.let(nil, ::T.untyped)
  GP_3_UP = ::T.let(nil, ::T.untyped)
  GP_BUTTON_0 = ::T.let(nil, ::T.untyped)
  GP_BUTTON_1 = ::T.let(nil, ::T.untyped)
  GP_BUTTON_10 = ::T.let(nil, ::T.untyped)
  GP_BUTTON_11 = ::T.let(nil, ::T.untyped)
  GP_BUTTON_12 = ::T.let(nil, ::T.untyped)
  GP_BUTTON_13 = ::T.let(nil, ::T.untyped)
  GP_BUTTON_14 = ::T.let(nil, ::T.untyped)
  GP_BUTTON_15 = ::T.let(nil, ::T.untyped)
  GP_BUTTON_2 = ::T.let(nil, ::T.untyped)
  GP_BUTTON_3 = ::T.let(nil, ::T.untyped)
  GP_BUTTON_4 = ::T.let(nil, ::T.untyped)
  GP_BUTTON_5 = ::T.let(nil, ::T.untyped)
  GP_BUTTON_6 = ::T.let(nil, ::T.untyped)
  GP_BUTTON_7 = ::T.let(nil, ::T.untyped)
  GP_BUTTON_8 = ::T.let(nil, ::T.untyped)
  GP_BUTTON_9 = ::T.let(nil, ::T.untyped)
  GP_DOWN = ::T.let(nil, ::T.untyped)
  GP_LEFT = ::T.let(nil, ::T.untyped)
  GP_RIGHT = ::T.let(nil, ::T.untyped)
  GP_UP = ::T.let(nil, ::T.untyped)
  Gp0Button0 = ::T.let(nil, ::T.untyped)
  Gp0Button1 = ::T.let(nil, ::T.untyped)
  Gp0Button10 = ::T.let(nil, ::T.untyped)
  Gp0Button11 = ::T.let(nil, ::T.untyped)
  Gp0Button12 = ::T.let(nil, ::T.untyped)
  Gp0Button13 = ::T.let(nil, ::T.untyped)
  Gp0Button14 = ::T.let(nil, ::T.untyped)
  Gp0Button15 = ::T.let(nil, ::T.untyped)
  Gp0Button2 = ::T.let(nil, ::T.untyped)
  Gp0Button3 = ::T.let(nil, ::T.untyped)
  Gp0Button4 = ::T.let(nil, ::T.untyped)
  Gp0Button5 = ::T.let(nil, ::T.untyped)
  Gp0Button6 = ::T.let(nil, ::T.untyped)
  Gp0Button7 = ::T.let(nil, ::T.untyped)
  Gp0Button8 = ::T.let(nil, ::T.untyped)
  Gp0Button9 = ::T.let(nil, ::T.untyped)
  Gp0Down = ::T.let(nil, ::T.untyped)
  Gp0Left = ::T.let(nil, ::T.untyped)
  Gp0Right = ::T.let(nil, ::T.untyped)
  Gp0Up = ::T.let(nil, ::T.untyped)
  Gp1Button0 = ::T.let(nil, ::T.untyped)
  Gp1Button1 = ::T.let(nil, ::T.untyped)
  Gp1Button10 = ::T.let(nil, ::T.untyped)
  Gp1Button11 = ::T.let(nil, ::T.untyped)
  Gp1Button12 = ::T.let(nil, ::T.untyped)
  Gp1Button13 = ::T.let(nil, ::T.untyped)
  Gp1Button14 = ::T.let(nil, ::T.untyped)
  Gp1Button15 = ::T.let(nil, ::T.untyped)
  Gp1Button2 = ::T.let(nil, ::T.untyped)
  Gp1Button3 = ::T.let(nil, ::T.untyped)
  Gp1Button4 = ::T.let(nil, ::T.untyped)
  Gp1Button5 = ::T.let(nil, ::T.untyped)
  Gp1Button6 = ::T.let(nil, ::T.untyped)
  Gp1Button7 = ::T.let(nil, ::T.untyped)
  Gp1Button8 = ::T.let(nil, ::T.untyped)
  Gp1Button9 = ::T.let(nil, ::T.untyped)
  Gp1Down = ::T.let(nil, ::T.untyped)
  Gp1Left = ::T.let(nil, ::T.untyped)
  Gp1Right = ::T.let(nil, ::T.untyped)
  Gp1Up = ::T.let(nil, ::T.untyped)
  Gp2Button0 = ::T.let(nil, ::T.untyped)
  Gp2Button1 = ::T.let(nil, ::T.untyped)
  Gp2Button10 = ::T.let(nil, ::T.untyped)
  Gp2Button11 = ::T.let(nil, ::T.untyped)
  Gp2Button12 = ::T.let(nil, ::T.untyped)
  Gp2Button13 = ::T.let(nil, ::T.untyped)
  Gp2Button14 = ::T.let(nil, ::T.untyped)
  Gp2Button15 = ::T.let(nil, ::T.untyped)
  Gp2Button2 = ::T.let(nil, ::T.untyped)
  Gp2Button3 = ::T.let(nil, ::T.untyped)
  Gp2Button4 = ::T.let(nil, ::T.untyped)
  Gp2Button5 = ::T.let(nil, ::T.untyped)
  Gp2Button6 = ::T.let(nil, ::T.untyped)
  Gp2Button7 = ::T.let(nil, ::T.untyped)
  Gp2Button8 = ::T.let(nil, ::T.untyped)
  Gp2Button9 = ::T.let(nil, ::T.untyped)
  Gp2Down = ::T.let(nil, ::T.untyped)
  Gp2Left = ::T.let(nil, ::T.untyped)
  Gp2Right = ::T.let(nil, ::T.untyped)
  Gp2Up = ::T.let(nil, ::T.untyped)
  Gp3Button0 = ::T.let(nil, ::T.untyped)
  Gp3Button1 = ::T.let(nil, ::T.untyped)
  Gp3Button10 = ::T.let(nil, ::T.untyped)
  Gp3Button11 = ::T.let(nil, ::T.untyped)
  Gp3Button12 = ::T.let(nil, ::T.untyped)
  Gp3Button13 = ::T.let(nil, ::T.untyped)
  Gp3Button14 = ::T.let(nil, ::T.untyped)
  Gp3Button15 = ::T.let(nil, ::T.untyped)
  Gp3Button2 = ::T.let(nil, ::T.untyped)
  Gp3Button3 = ::T.let(nil, ::T.untyped)
  Gp3Button4 = ::T.let(nil, ::T.untyped)
  Gp3Button5 = ::T.let(nil, ::T.untyped)
  Gp3Button6 = ::T.let(nil, ::T.untyped)
  Gp3Button7 = ::T.let(nil, ::T.untyped)
  Gp3Button8 = ::T.let(nil, ::T.untyped)
  Gp3Button9 = ::T.let(nil, ::T.untyped)
  Gp3Down = ::T.let(nil, ::T.untyped)
  Gp3Left = ::T.let(nil, ::T.untyped)
  Gp3Right = ::T.let(nil, ::T.untyped)
  Gp3Up = ::T.let(nil, ::T.untyped)
  GpButton0 = ::T.let(nil, ::T.untyped)
  GpButton1 = ::T.let(nil, ::T.untyped)
  GpButton10 = ::T.let(nil, ::T.untyped)
  GpButton11 = ::T.let(nil, ::T.untyped)
  GpButton12 = ::T.let(nil, ::T.untyped)
  GpButton13 = ::T.let(nil, ::T.untyped)
  GpButton14 = ::T.let(nil, ::T.untyped)
  GpButton15 = ::T.let(nil, ::T.untyped)
  GpButton2 = ::T.let(nil, ::T.untyped)
  GpButton3 = ::T.let(nil, ::T.untyped)
  GpButton4 = ::T.let(nil, ::T.untyped)
  GpButton5 = ::T.let(nil, ::T.untyped)
  GpButton6 = ::T.let(nil, ::T.untyped)
  GpButton7 = ::T.let(nil, ::T.untyped)
  GpButton8 = ::T.let(nil, ::T.untyped)
  GpButton9 = ::T.let(nil, ::T.untyped)
  GpDown = ::T.let(nil, ::T.untyped)
  GpLeft = ::T.let(nil, ::T.untyped)
  GpRight = ::T.let(nil, ::T.untyped)
  GpUp = ::T.let(nil, ::T.untyped)
  KB_0 = ::T.let(nil, ::T.untyped)
  KB_1 = ::T.let(nil, ::T.untyped)
  KB_2 = ::T.let(nil, ::T.untyped)
  KB_3 = ::T.let(nil, ::T.untyped)
  KB_4 = ::T.let(nil, ::T.untyped)
  KB_5 = ::T.let(nil, ::T.untyped)
  KB_6 = ::T.let(nil, ::T.untyped)
  KB_7 = ::T.let(nil, ::T.untyped)
  KB_8 = ::T.let(nil, ::T.untyped)
  KB_9 = ::T.let(nil, ::T.untyped)
  KB_A = ::T.let(nil, ::T.untyped)
  KB_APOSTROPHE = ::T.let(nil, ::T.untyped)
  KB_B = ::T.let(nil, ::T.untyped)
  KB_BACKSLASH = ::T.let(nil, ::T.untyped)
  KB_BACKSPACE = ::T.let(nil, ::T.untyped)
  KB_BACKTICK = ::T.let(nil, ::T.untyped)
  KB_C = ::T.let(nil, ::T.untyped)
  KB_COMMA = ::T.let(nil, ::T.untyped)
  KB_D = ::T.let(nil, ::T.untyped)
  KB_DELETE = ::T.let(nil, ::T.untyped)
  KB_DOWN = ::T.let(nil, ::T.untyped)
  KB_E = ::T.let(nil, ::T.untyped)
  KB_END = ::T.let(nil, ::T.untyped)
  KB_ENTER = ::T.let(nil, ::T.untyped)
  KB_EQUALS = ::T.let(nil, ::T.untyped)
  KB_ESCAPE = ::T.let(nil, ::T.untyped)
  KB_F = ::T.let(nil, ::T.untyped)
  KB_F1 = ::T.let(nil, ::T.untyped)
  KB_F10 = ::T.let(nil, ::T.untyped)
  KB_F11 = ::T.let(nil, ::T.untyped)
  KB_F12 = ::T.let(nil, ::T.untyped)
  KB_F2 = ::T.let(nil, ::T.untyped)
  KB_F3 = ::T.let(nil, ::T.untyped)
  KB_F4 = ::T.let(nil, ::T.untyped)
  KB_F5 = ::T.let(nil, ::T.untyped)
  KB_F6 = ::T.let(nil, ::T.untyped)
  KB_F7 = ::T.let(nil, ::T.untyped)
  KB_F8 = ::T.let(nil, ::T.untyped)
  KB_F9 = ::T.let(nil, ::T.untyped)
  KB_G = ::T.let(nil, ::T.untyped)
  KB_H = ::T.let(nil, ::T.untyped)
  KB_HOME = ::T.let(nil, ::T.untyped)
  KB_I = ::T.let(nil, ::T.untyped)
  KB_INSERT = ::T.let(nil, ::T.untyped)
  KB_ISO = ::T.let(nil, ::T.untyped)
  KB_J = ::T.let(nil, ::T.untyped)
  KB_K = ::T.let(nil, ::T.untyped)
  KB_L = ::T.let(nil, ::T.untyped)
  KB_LEFT = ::T.let(nil, ::T.untyped)
  KB_LEFT_ALT = ::T.let(nil, ::T.untyped)
  KB_LEFT_BRACKET = ::T.let(nil, ::T.untyped)
  KB_LEFT_CONTROL = ::T.let(nil, ::T.untyped)
  KB_LEFT_META = ::T.let(nil, ::T.untyped)
  KB_LEFT_SHIFT = ::T.let(nil, ::T.untyped)
  KB_M = ::T.let(nil, ::T.untyped)
  KB_MINUS = ::T.let(nil, ::T.untyped)
  KB_N = ::T.let(nil, ::T.untyped)
  KB_NUMPAD_0 = ::T.let(nil, ::T.untyped)
  KB_NUMPAD_1 = ::T.let(nil, ::T.untyped)
  KB_NUMPAD_2 = ::T.let(nil, ::T.untyped)
  KB_NUMPAD_3 = ::T.let(nil, ::T.untyped)
  KB_NUMPAD_4 = ::T.let(nil, ::T.untyped)
  KB_NUMPAD_5 = ::T.let(nil, ::T.untyped)
  KB_NUMPAD_6 = ::T.let(nil, ::T.untyped)
  KB_NUMPAD_7 = ::T.let(nil, ::T.untyped)
  KB_NUMPAD_8 = ::T.let(nil, ::T.untyped)
  KB_NUMPAD_9 = ::T.let(nil, ::T.untyped)
  KB_NUMPAD_DELETE = ::T.let(nil, ::T.untyped)
  KB_NUMPAD_DIVIDE = ::T.let(nil, ::T.untyped)
  KB_NUMPAD_MINUS = ::T.let(nil, ::T.untyped)
  KB_NUMPAD_MULTIPLY = ::T.let(nil, ::T.untyped)
  KB_NUMPAD_PLUS = ::T.let(nil, ::T.untyped)
  KB_O = ::T.let(nil, ::T.untyped)
  KB_P = ::T.let(nil, ::T.untyped)
  KB_PAGE_DOWN = ::T.let(nil, ::T.untyped)
  KB_PAGE_UP = ::T.let(nil, ::T.untyped)
  KB_PERIOD = ::T.let(nil, ::T.untyped)
  KB_Q = ::T.let(nil, ::T.untyped)
  KB_R = ::T.let(nil, ::T.untyped)
  KB_RETURN = ::T.let(nil, ::T.untyped)
  KB_RIGHT = ::T.let(nil, ::T.untyped)
  KB_RIGHT_ALT = ::T.let(nil, ::T.untyped)
  KB_RIGHT_BRACKET = ::T.let(nil, ::T.untyped)
  KB_RIGHT_CONTROL = ::T.let(nil, ::T.untyped)
  KB_RIGHT_META = ::T.let(nil, ::T.untyped)
  KB_RIGHT_SHIFT = ::T.let(nil, ::T.untyped)
  KB_S = ::T.let(nil, ::T.untyped)
  KB_SEMICOLON = ::T.let(nil, ::T.untyped)
  KB_SLASH = ::T.let(nil, ::T.untyped)
  KB_SPACE = ::T.let(nil, ::T.untyped)
  KB_T = ::T.let(nil, ::T.untyped)
  KB_TAB = ::T.let(nil, ::T.untyped)
  KB_U = ::T.let(nil, ::T.untyped)
  KB_UP = ::T.let(nil, ::T.untyped)
  KB_V = ::T.let(nil, ::T.untyped)
  KB_W = ::T.let(nil, ::T.untyped)
  KB_X = ::T.let(nil, ::T.untyped)
  KB_Y = ::T.let(nil, ::T.untyped)
  KB_Z = ::T.let(nil, ::T.untyped)
  Kb0 = ::T.let(nil, ::T.untyped)
  Kb1 = ::T.let(nil, ::T.untyped)
  Kb2 = ::T.let(nil, ::T.untyped)
  Kb3 = ::T.let(nil, ::T.untyped)
  Kb4 = ::T.let(nil, ::T.untyped)
  Kb5 = ::T.let(nil, ::T.untyped)
  Kb6 = ::T.let(nil, ::T.untyped)
  Kb7 = ::T.let(nil, ::T.untyped)
  Kb8 = ::T.let(nil, ::T.untyped)
  Kb9 = ::T.let(nil, ::T.untyped)
  KbA = ::T.let(nil, ::T.untyped)
  KbApostrophe = ::T.let(nil, ::T.untyped)
  KbB = ::T.let(nil, ::T.untyped)
  KbBackslash = ::T.let(nil, ::T.untyped)
  KbBackspace = ::T.let(nil, ::T.untyped)
  KbBacktick = ::T.let(nil, ::T.untyped)
  KbBracketLeft = ::T.let(nil, ::T.untyped)
  KbBracketRight = ::T.let(nil, ::T.untyped)
  KbC = ::T.let(nil, ::T.untyped)
  KbComma = ::T.let(nil, ::T.untyped)
  KbD = ::T.let(nil, ::T.untyped)
  KbDelete = ::T.let(nil, ::T.untyped)
  KbDown = ::T.let(nil, ::T.untyped)
  KbE = ::T.let(nil, ::T.untyped)
  KbEnd = ::T.let(nil, ::T.untyped)
  KbEnter = ::T.let(nil, ::T.untyped)
  KbEqual = ::T.let(nil, ::T.untyped)
  KbEscape = ::T.let(nil, ::T.untyped)
  KbF = ::T.let(nil, ::T.untyped)
  KbF1 = ::T.let(nil, ::T.untyped)
  KbF10 = ::T.let(nil, ::T.untyped)
  KbF11 = ::T.let(nil, ::T.untyped)
  KbF12 = ::T.let(nil, ::T.untyped)
  KbF2 = ::T.let(nil, ::T.untyped)
  KbF3 = ::T.let(nil, ::T.untyped)
  KbF4 = ::T.let(nil, ::T.untyped)
  KbF5 = ::T.let(nil, ::T.untyped)
  KbF6 = ::T.let(nil, ::T.untyped)
  KbF7 = ::T.let(nil, ::T.untyped)
  KbF8 = ::T.let(nil, ::T.untyped)
  KbF9 = ::T.let(nil, ::T.untyped)
  KbG = ::T.let(nil, ::T.untyped)
  KbH = ::T.let(nil, ::T.untyped)
  KbHome = ::T.let(nil, ::T.untyped)
  KbI = ::T.let(nil, ::T.untyped)
  KbISO = ::T.let(nil, ::T.untyped)
  KbInsert = ::T.let(nil, ::T.untyped)
  KbJ = ::T.let(nil, ::T.untyped)
  KbK = ::T.let(nil, ::T.untyped)
  KbL = ::T.let(nil, ::T.untyped)
  KbLeft = ::T.let(nil, ::T.untyped)
  KbLeftAlt = ::T.let(nil, ::T.untyped)
  KbLeftControl = ::T.let(nil, ::T.untyped)
  KbLeftMeta = ::T.let(nil, ::T.untyped)
  KbLeftShift = ::T.let(nil, ::T.untyped)
  KbM = ::T.let(nil, ::T.untyped)
  KbMinus = ::T.let(nil, ::T.untyped)
  KbN = ::T.let(nil, ::T.untyped)
  KbNumpad0 = ::T.let(nil, ::T.untyped)
  KbNumpad1 = ::T.let(nil, ::T.untyped)
  KbNumpad2 = ::T.let(nil, ::T.untyped)
  KbNumpad3 = ::T.let(nil, ::T.untyped)
  KbNumpad4 = ::T.let(nil, ::T.untyped)
  KbNumpad5 = ::T.let(nil, ::T.untyped)
  KbNumpad6 = ::T.let(nil, ::T.untyped)
  KbNumpad7 = ::T.let(nil, ::T.untyped)
  KbNumpad8 = ::T.let(nil, ::T.untyped)
  KbNumpad9 = ::T.let(nil, ::T.untyped)
  KbNumpadAdd = ::T.let(nil, ::T.untyped)
  KbNumpadDelete = ::T.let(nil, ::T.untyped)
  KbNumpadDivide = ::T.let(nil, ::T.untyped)
  KbNumpadMultiply = ::T.let(nil, ::T.untyped)
  KbNumpadSubtract = ::T.let(nil, ::T.untyped)
  KbO = ::T.let(nil, ::T.untyped)
  KbP = ::T.let(nil, ::T.untyped)
  KbPageDown = ::T.let(nil, ::T.untyped)
  KbPageUp = ::T.let(nil, ::T.untyped)
  KbPeriod = ::T.let(nil, ::T.untyped)
  KbQ = ::T.let(nil, ::T.untyped)
  KbR = ::T.let(nil, ::T.untyped)
  KbReturn = ::T.let(nil, ::T.untyped)
  KbRight = ::T.let(nil, ::T.untyped)
  KbRightAlt = ::T.let(nil, ::T.untyped)
  KbRightControl = ::T.let(nil, ::T.untyped)
  KbRightMeta = ::T.let(nil, ::T.untyped)
  KbRightShift = ::T.let(nil, ::T.untyped)
  KbS = ::T.let(nil, ::T.untyped)
  KbSemicolon = ::T.let(nil, ::T.untyped)
  KbSlash = ::T.let(nil, ::T.untyped)
  KbSpace = ::T.let(nil, ::T.untyped)
  KbT = ::T.let(nil, ::T.untyped)
  KbTab = ::T.let(nil, ::T.untyped)
  KbU = ::T.let(nil, ::T.untyped)
  KbUp = ::T.let(nil, ::T.untyped)
  KbV = ::T.let(nil, ::T.untyped)
  KbW = ::T.let(nil, ::T.untyped)
  KbX = ::T.let(nil, ::T.untyped)
  KbY = ::T.let(nil, ::T.untyped)
  KbZ = ::T.let(nil, ::T.untyped)
  LICENSES = ::T.let(nil, ::T.untyped)
  MAJOR_VERSION = ::T.let(nil, ::T.untyped)
  MAX_TEXTURE_SIZE = ::T.let(nil, ::T.untyped)
  MINOR_VERSION = ::T.let(nil, ::T.untyped)
  MS_LEFT = ::T.let(nil, ::T.untyped)
  MS_MIDDLE = ::T.let(nil, ::T.untyped)
  MS_OTHER_0 = ::T.let(nil, ::T.untyped)
  MS_OTHER_1 = ::T.let(nil, ::T.untyped)
  MS_OTHER_2 = ::T.let(nil, ::T.untyped)
  MS_OTHER_3 = ::T.let(nil, ::T.untyped)
  MS_OTHER_4 = ::T.let(nil, ::T.untyped)
  MS_OTHER_5 = ::T.let(nil, ::T.untyped)
  MS_OTHER_6 = ::T.let(nil, ::T.untyped)
  MS_OTHER_7 = ::T.let(nil, ::T.untyped)
  MS_RIGHT = ::T.let(nil, ::T.untyped)
  MS_WHEEL_DOWN = ::T.let(nil, ::T.untyped)
  MS_WHEEL_UP = ::T.let(nil, ::T.untyped)
  MsLeft = ::T.let(nil, ::T.untyped)
  MsMiddle = ::T.let(nil, ::T.untyped)
  MsOther0 = ::T.let(nil, ::T.untyped)
  MsOther1 = ::T.let(nil, ::T.untyped)
  MsOther2 = ::T.let(nil, ::T.untyped)
  MsOther3 = ::T.let(nil, ::T.untyped)
  MsOther4 = ::T.let(nil, ::T.untyped)
  MsOther5 = ::T.let(nil, ::T.untyped)
  MsOther6 = ::T.let(nil, ::T.untyped)
  MsOther7 = ::T.let(nil, ::T.untyped)
  MsRight = ::T.let(nil, ::T.untyped)
  MsWheelDown = ::T.let(nil, ::T.untyped)
  MsWheelUp = ::T.let(nil, ::T.untyped)
  POINT_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Gosu::Button
  Gp0Button0 = ::T.let(nil, ::T.untyped)
  Gp0Button1 = ::T.let(nil, ::T.untyped)
  Gp0Button10 = ::T.let(nil, ::T.untyped)
  Gp0Button11 = ::T.let(nil, ::T.untyped)
  Gp0Button12 = ::T.let(nil, ::T.untyped)
  Gp0Button13 = ::T.let(nil, ::T.untyped)
  Gp0Button14 = ::T.let(nil, ::T.untyped)
  Gp0Button15 = ::T.let(nil, ::T.untyped)
  Gp0Button2 = ::T.let(nil, ::T.untyped)
  Gp0Button3 = ::T.let(nil, ::T.untyped)
  Gp0Button4 = ::T.let(nil, ::T.untyped)
  Gp0Button5 = ::T.let(nil, ::T.untyped)
  Gp0Button6 = ::T.let(nil, ::T.untyped)
  Gp0Button7 = ::T.let(nil, ::T.untyped)
  Gp0Button8 = ::T.let(nil, ::T.untyped)
  Gp0Button9 = ::T.let(nil, ::T.untyped)
  Gp0Down = ::T.let(nil, ::T.untyped)
  Gp0Left = ::T.let(nil, ::T.untyped)
  Gp0Right = ::T.let(nil, ::T.untyped)
  Gp0Up = ::T.let(nil, ::T.untyped)
  Gp1Button0 = ::T.let(nil, ::T.untyped)
  Gp1Button1 = ::T.let(nil, ::T.untyped)
  Gp1Button10 = ::T.let(nil, ::T.untyped)
  Gp1Button11 = ::T.let(nil, ::T.untyped)
  Gp1Button12 = ::T.let(nil, ::T.untyped)
  Gp1Button13 = ::T.let(nil, ::T.untyped)
  Gp1Button14 = ::T.let(nil, ::T.untyped)
  Gp1Button15 = ::T.let(nil, ::T.untyped)
  Gp1Button2 = ::T.let(nil, ::T.untyped)
  Gp1Button3 = ::T.let(nil, ::T.untyped)
  Gp1Button4 = ::T.let(nil, ::T.untyped)
  Gp1Button5 = ::T.let(nil, ::T.untyped)
  Gp1Button6 = ::T.let(nil, ::T.untyped)
  Gp1Button7 = ::T.let(nil, ::T.untyped)
  Gp1Button8 = ::T.let(nil, ::T.untyped)
  Gp1Button9 = ::T.let(nil, ::T.untyped)
  Gp1Down = ::T.let(nil, ::T.untyped)
  Gp1Left = ::T.let(nil, ::T.untyped)
  Gp1Right = ::T.let(nil, ::T.untyped)
  Gp1Up = ::T.let(nil, ::T.untyped)
  Gp2Button0 = ::T.let(nil, ::T.untyped)
  Gp2Button1 = ::T.let(nil, ::T.untyped)
  Gp2Button10 = ::T.let(nil, ::T.untyped)
  Gp2Button11 = ::T.let(nil, ::T.untyped)
  Gp2Button12 = ::T.let(nil, ::T.untyped)
  Gp2Button13 = ::T.let(nil, ::T.untyped)
  Gp2Button14 = ::T.let(nil, ::T.untyped)
  Gp2Button15 = ::T.let(nil, ::T.untyped)
  Gp2Button2 = ::T.let(nil, ::T.untyped)
  Gp2Button3 = ::T.let(nil, ::T.untyped)
  Gp2Button4 = ::T.let(nil, ::T.untyped)
  Gp2Button5 = ::T.let(nil, ::T.untyped)
  Gp2Button6 = ::T.let(nil, ::T.untyped)
  Gp2Button7 = ::T.let(nil, ::T.untyped)
  Gp2Button8 = ::T.let(nil, ::T.untyped)
  Gp2Button9 = ::T.let(nil, ::T.untyped)
  Gp2Down = ::T.let(nil, ::T.untyped)
  Gp2Left = ::T.let(nil, ::T.untyped)
  Gp2Right = ::T.let(nil, ::T.untyped)
  Gp2Up = ::T.let(nil, ::T.untyped)
  Gp3Button0 = ::T.let(nil, ::T.untyped)
  Gp3Button1 = ::T.let(nil, ::T.untyped)
  Gp3Button10 = ::T.let(nil, ::T.untyped)
  Gp3Button11 = ::T.let(nil, ::T.untyped)
  Gp3Button12 = ::T.let(nil, ::T.untyped)
  Gp3Button13 = ::T.let(nil, ::T.untyped)
  Gp3Button14 = ::T.let(nil, ::T.untyped)
  Gp3Button15 = ::T.let(nil, ::T.untyped)
  Gp3Button2 = ::T.let(nil, ::T.untyped)
  Gp3Button3 = ::T.let(nil, ::T.untyped)
  Gp3Button4 = ::T.let(nil, ::T.untyped)
  Gp3Button5 = ::T.let(nil, ::T.untyped)
  Gp3Button6 = ::T.let(nil, ::T.untyped)
  Gp3Button7 = ::T.let(nil, ::T.untyped)
  Gp3Button8 = ::T.let(nil, ::T.untyped)
  Gp3Button9 = ::T.let(nil, ::T.untyped)
  Gp3Down = ::T.let(nil, ::T.untyped)
  Gp3Left = ::T.let(nil, ::T.untyped)
  Gp3Right = ::T.let(nil, ::T.untyped)
  Gp3Up = ::T.let(nil, ::T.untyped)
  GpButton0 = ::T.let(nil, ::T.untyped)
  GpButton1 = ::T.let(nil, ::T.untyped)
  GpButton10 = ::T.let(nil, ::T.untyped)
  GpButton11 = ::T.let(nil, ::T.untyped)
  GpButton12 = ::T.let(nil, ::T.untyped)
  GpButton13 = ::T.let(nil, ::T.untyped)
  GpButton14 = ::T.let(nil, ::T.untyped)
  GpButton15 = ::T.let(nil, ::T.untyped)
  GpButton2 = ::T.let(nil, ::T.untyped)
  GpButton3 = ::T.let(nil, ::T.untyped)
  GpButton4 = ::T.let(nil, ::T.untyped)
  GpButton5 = ::T.let(nil, ::T.untyped)
  GpButton6 = ::T.let(nil, ::T.untyped)
  GpButton7 = ::T.let(nil, ::T.untyped)
  GpButton8 = ::T.let(nil, ::T.untyped)
  GpButton9 = ::T.let(nil, ::T.untyped)
  GpDown = ::T.let(nil, ::T.untyped)
  GpLeft = ::T.let(nil, ::T.untyped)
  GpRight = ::T.let(nil, ::T.untyped)
  GpUp = ::T.let(nil, ::T.untyped)
  Kb0 = ::T.let(nil, ::T.untyped)
  Kb1 = ::T.let(nil, ::T.untyped)
  Kb2 = ::T.let(nil, ::T.untyped)
  Kb3 = ::T.let(nil, ::T.untyped)
  Kb4 = ::T.let(nil, ::T.untyped)
  Kb5 = ::T.let(nil, ::T.untyped)
  Kb6 = ::T.let(nil, ::T.untyped)
  Kb7 = ::T.let(nil, ::T.untyped)
  Kb8 = ::T.let(nil, ::T.untyped)
  Kb9 = ::T.let(nil, ::T.untyped)
  KbA = ::T.let(nil, ::T.untyped)
  KbApostrophe = ::T.let(nil, ::T.untyped)
  KbB = ::T.let(nil, ::T.untyped)
  KbBackslash = ::T.let(nil, ::T.untyped)
  KbBackspace = ::T.let(nil, ::T.untyped)
  KbBacktick = ::T.let(nil, ::T.untyped)
  KbBracketLeft = ::T.let(nil, ::T.untyped)
  KbBracketRight = ::T.let(nil, ::T.untyped)
  KbC = ::T.let(nil, ::T.untyped)
  KbComma = ::T.let(nil, ::T.untyped)
  KbD = ::T.let(nil, ::T.untyped)
  KbDelete = ::T.let(nil, ::T.untyped)
  KbDown = ::T.let(nil, ::T.untyped)
  KbE = ::T.let(nil, ::T.untyped)
  KbEnd = ::T.let(nil, ::T.untyped)
  KbEnter = ::T.let(nil, ::T.untyped)
  KbEqual = ::T.let(nil, ::T.untyped)
  KbEscape = ::T.let(nil, ::T.untyped)
  KbF = ::T.let(nil, ::T.untyped)
  KbF1 = ::T.let(nil, ::T.untyped)
  KbF10 = ::T.let(nil, ::T.untyped)
  KbF11 = ::T.let(nil, ::T.untyped)
  KbF12 = ::T.let(nil, ::T.untyped)
  KbF2 = ::T.let(nil, ::T.untyped)
  KbF3 = ::T.let(nil, ::T.untyped)
  KbF4 = ::T.let(nil, ::T.untyped)
  KbF5 = ::T.let(nil, ::T.untyped)
  KbF6 = ::T.let(nil, ::T.untyped)
  KbF7 = ::T.let(nil, ::T.untyped)
  KbF8 = ::T.let(nil, ::T.untyped)
  KbF9 = ::T.let(nil, ::T.untyped)
  KbG = ::T.let(nil, ::T.untyped)
  KbH = ::T.let(nil, ::T.untyped)
  KbHome = ::T.let(nil, ::T.untyped)
  KbI = ::T.let(nil, ::T.untyped)
  KbISO = ::T.let(nil, ::T.untyped)
  KbInsert = ::T.let(nil, ::T.untyped)
  KbJ = ::T.let(nil, ::T.untyped)
  KbK = ::T.let(nil, ::T.untyped)
  KbL = ::T.let(nil, ::T.untyped)
  KbLeft = ::T.let(nil, ::T.untyped)
  KbLeftAlt = ::T.let(nil, ::T.untyped)
  KbLeftControl = ::T.let(nil, ::T.untyped)
  KbLeftMeta = ::T.let(nil, ::T.untyped)
  KbLeftShift = ::T.let(nil, ::T.untyped)
  KbM = ::T.let(nil, ::T.untyped)
  KbMinus = ::T.let(nil, ::T.untyped)
  KbN = ::T.let(nil, ::T.untyped)
  KbNumpad0 = ::T.let(nil, ::T.untyped)
  KbNumpad1 = ::T.let(nil, ::T.untyped)
  KbNumpad2 = ::T.let(nil, ::T.untyped)
  KbNumpad3 = ::T.let(nil, ::T.untyped)
  KbNumpad4 = ::T.let(nil, ::T.untyped)
  KbNumpad5 = ::T.let(nil, ::T.untyped)
  KbNumpad6 = ::T.let(nil, ::T.untyped)
  KbNumpad7 = ::T.let(nil, ::T.untyped)
  KbNumpad8 = ::T.let(nil, ::T.untyped)
  KbNumpad9 = ::T.let(nil, ::T.untyped)
  KbNumpadAdd = ::T.let(nil, ::T.untyped)
  KbNumpadDelete = ::T.let(nil, ::T.untyped)
  KbNumpadDivide = ::T.let(nil, ::T.untyped)
  KbNumpadMultiply = ::T.let(nil, ::T.untyped)
  KbNumpadSubtract = ::T.let(nil, ::T.untyped)
  KbO = ::T.let(nil, ::T.untyped)
  KbP = ::T.let(nil, ::T.untyped)
  KbPageDown = ::T.let(nil, ::T.untyped)
  KbPageUp = ::T.let(nil, ::T.untyped)
  KbPeriod = ::T.let(nil, ::T.untyped)
  KbQ = ::T.let(nil, ::T.untyped)
  KbR = ::T.let(nil, ::T.untyped)
  KbReturn = ::T.let(nil, ::T.untyped)
  KbRight = ::T.let(nil, ::T.untyped)
  KbRightAlt = ::T.let(nil, ::T.untyped)
  KbRightControl = ::T.let(nil, ::T.untyped)
  KbRightMeta = ::T.let(nil, ::T.untyped)
  KbRightShift = ::T.let(nil, ::T.untyped)
  KbS = ::T.let(nil, ::T.untyped)
  KbSemicolon = ::T.let(nil, ::T.untyped)
  KbSlash = ::T.let(nil, ::T.untyped)
  KbSpace = ::T.let(nil, ::T.untyped)
  KbT = ::T.let(nil, ::T.untyped)
  KbTab = ::T.let(nil, ::T.untyped)
  KbU = ::T.let(nil, ::T.untyped)
  KbUp = ::T.let(nil, ::T.untyped)
  KbV = ::T.let(nil, ::T.untyped)
  KbW = ::T.let(nil, ::T.untyped)
  KbX = ::T.let(nil, ::T.untyped)
  KbY = ::T.let(nil, ::T.untyped)
  KbZ = ::T.let(nil, ::T.untyped)
  MsLeft = ::T.let(nil, ::T.untyped)
  MsMiddle = ::T.let(nil, ::T.untyped)
  MsOther0 = ::T.let(nil, ::T.untyped)
  MsOther1 = ::T.let(nil, ::T.untyped)
  MsOther2 = ::T.let(nil, ::T.untyped)
  MsOther3 = ::T.let(nil, ::T.untyped)
  MsOther4 = ::T.let(nil, ::T.untyped)
  MsOther5 = ::T.let(nil, ::T.untyped)
  MsOther6 = ::T.let(nil, ::T.untyped)
  MsOther7 = ::T.let(nil, ::T.untyped)
  MsRight = ::T.let(nil, ::T.untyped)
  MsWheelDown = ::T.let(nil, ::T.untyped)
  MsWheelUp = ::T.let(nil, ::T.untyped)
end

class Gosu::Color
  AQUA = ::T.let(nil, ::T.untyped)
  BLACK = ::T.let(nil, ::T.untyped)
  BLUE = ::T.let(nil, ::T.untyped)
  CYAN = ::T.let(nil, ::T.untyped)
  FUCHSIA = ::T.let(nil, ::T.untyped)
  GL_FORMAT = ::T.let(nil, ::T.untyped)
  GRAY = ::T.let(nil, ::T.untyped)
  GREEN = ::T.let(nil, ::T.untyped)
  NONE = ::T.let(nil, ::T.untyped)
  RED = ::T.let(nil, ::T.untyped)
  WHITE = ::T.let(nil, ::T.untyped)
  YELLOW = ::T.let(nil, ::T.untyped)
end

class Gosu::Image
  include ::Spritable
end

class Hash
  include ::JSON::Ext::Generator::GeneratorMethods::Hash
end

class Hash
  def self.try_convert(_); end
end

class IO
  def beep(); end

  def cooked(); end

  def cooked!(); end

  def cursor(); end

  def cursor=(); end

  def echo=(echo); end

  def echo?(); end

  def getch(*_); end

  def getpass(*_); end

  def goto(); end

  def iflush(); end

  def ioflush(); end

  def noecho(); end

  def nonblock(*_); end

  def nonblock=(nonblock); end

  def nonblock?(); end

  def nread(); end

  def oflush(); end

  def pathconf(_); end

  def pressed?(); end

  def raw(*_); end

  def raw!(*_); end

  def ready?(); end

  def wait(*_); end

  def wait_readable(*_); end

  def wait_writable(*_); end

  def winsize(); end

  def winsize=(winsize); end
end

IO::EWOULDBLOCKWaitReadable = IO::EAGAINWaitReadable

IO::EWOULDBLOCKWaitWritable = IO::EAGAINWaitWritable

class IO
  def self.console(*_); end
end

class IPAddr
  def ==(other); end

  def initialize(addr=T.unsafe(nil), family=T.unsafe(nil)); end
end

class Integer
  include ::JSON::Ext::Generator::GeneratorMethods::Integer
  def to_bn(); end
end

class JSON::Ext::Generator::State
  def self.from_state(_); end
end

class JSON::Ext::Parser
  def initialize(*_); end
end

JSON::Parser = JSON::Ext::Parser

JSON::State = JSON::Ext::Generator::State

JSON::UnparserError = JSON::GeneratorError

module Kernel
  def itself(); end

  def object_id(); end

  def pretty_inspect(); end

  def then(); end

  def yield_self(); end
end

module Kernel
  def self.at_exit(); end
end

class KeyError
  include ::DidYouMean::Correctable
end

class Logger
  SEV_LABEL = ::T.let(nil, ::T.untyped)
end

class Logger::Formatter
  Format = ::T.let(nil, ::T.untyped)
end

class Logger::LogDevice
  include ::MonitorMixin
end

module Logger::Period
  SiD = ::T.let(nil, ::T.untyped)
end

module Magick
  AbsQuantumOperator = ::T.let(nil, ::T.untyped)
  AbsoluteErrorMetric = ::T.let(nil, ::T.untyped)
  AbsoluteIntent = ::T.let(nil, ::T.untyped)
  ActivateAlphaChannel = ::T.let(nil, ::T.untyped)
  AddModulusQuantumOperator = ::T.let(nil, ::T.untyped)
  AddNoisePreview = ::T.let(nil, ::T.untyped)
  AddQuantumOperator = ::T.let(nil, ::T.untyped)
  AffineDistortion = ::T.let(nil, ::T.untyped)
  AffineProjectionDistortion = ::T.let(nil, ::T.untyped)
  AllChannels = ::T.let(nil, ::T.untyped)
  AllCompliance = ::T.let(nil, ::T.untyped)
  AllValues = ::T.let(nil, ::T.untyped)
  AlphaChannel = ::T.let(nil, ::T.untyped)
  AndQuantumOperator = ::T.let(nil, ::T.untyped)
  AnyStretch = ::T.let(nil, ::T.untyped)
  AnyStyle = ::T.let(nil, ::T.untyped)
  AnyWeight = ::T.let(nil, ::T.untyped)
  ArcDistortion = ::T.let(nil, ::T.untyped)
  ArcsinFunction = ::T.let(nil, ::T.untyped)
  ArctanFunction = ::T.let(nil, ::T.untyped)
  AreaGeometry = ::T.let(nil, ::T.untyped)
  AreaValue = ::T.let(nil, ::T.untyped)
  AspectGeometry = ::T.let(nil, ::T.untyped)
  AspectValue = ::T.let(nil, ::T.untyped)
  AssociateAlphaChannel = ::T.let(nil, ::T.untyped)
  AtopCompositeOp = ::T.let(nil, ::T.untyped)
  Average16InterpolatePixel = ::T.let(nil, ::T.untyped)
  Average9InterpolatePixel = ::T.let(nil, ::T.untyped)
  AverageInterpolatePixel = ::T.let(nil, ::T.untyped)
  B44ACompression = ::T.let(nil, ::T.untyped)
  B44Compression = ::T.let(nil, ::T.untyped)
  BZipCompression = ::T.let(nil, ::T.untyped)
  BackgroundAlphaChannel = ::T.let(nil, ::T.untyped)
  BackgroundDispose = ::T.let(nil, ::T.untyped)
  BackgroundInterpolatePixel = ::T.let(nil, ::T.untyped)
  BackgroundVirtualPixelMethod = ::T.let(nil, ::T.untyped)
  BarrelDistortion = ::T.let(nil, ::T.untyped)
  BarrelInverseDistortion = ::T.let(nil, ::T.untyped)
  BartlettFilter = ::T.let(nil, ::T.untyped)
  BarycentricColorInterpolate = ::T.let(nil, ::T.untyped)
  BesselFilter = ::T.let(nil, ::T.untyped)
  BilevelType = ::T.let(nil, ::T.untyped)
  BilinearColorInterpolate = ::T.let(nil, ::T.untyped)
  BilinearDistortion = ::T.let(nil, ::T.untyped)
  BilinearForwardDistortion = ::T.let(nil, ::T.untyped)
  BilinearInterpolatePixel = ::T.let(nil, ::T.untyped)
  BilinearReverseDistortion = ::T.let(nil, ::T.untyped)
  BinomialKernel = ::T.let(nil, ::T.untyped)
  BlackChannel = ::T.let(nil, ::T.untyped)
  BlackVirtualPixelMethod = ::T.let(nil, ::T.untyped)
  BlackmanFilter = ::T.let(nil, ::T.untyped)
  BlendCompositeOp = ::T.let(nil, ::T.untyped)
  BlendInterpolatePixel = ::T.let(nil, ::T.untyped)
  BlueChannel = ::T.let(nil, ::T.untyped)
  BlurCompositeOp = ::T.let(nil, ::T.untyped)
  BlurKernel = ::T.let(nil, ::T.untyped)
  BlurPreview = ::T.let(nil, ::T.untyped)
  BohmanFilter = ::T.let(nil, ::T.untyped)
  BoldWeight = ::T.let(nil, ::T.untyped)
  BolderWeight = ::T.let(nil, ::T.untyped)
  BottomHatMorphology = ::T.let(nil, ::T.untyped)
  BottomLeftOrientation = ::T.let(nil, ::T.untyped)
  BottomRightOrientation = ::T.let(nil, ::T.untyped)
  BoxFilter = ::T.let(nil, ::T.untyped)
  BrightnessPreview = ::T.let(nil, ::T.untyped)
  BumpmapCompositeOp = ::T.let(nil, ::T.untyped)
  CMYColorspace = ::T.let(nil, ::T.untyped)
  CMYKColorspace = ::T.let(nil, ::T.untyped)
  CatromFilter = ::T.let(nil, ::T.untyped)
  CatromInterpolatePixel = ::T.let(nil, ::T.untyped)
  CenterAlign = ::T.let(nil, ::T.untyped)
  CenterGravity = ::T.let(nil, ::T.untyped)
  ChangeMaskCompositeOp = ::T.let(nil, ::T.untyped)
  CharPixel = ::T.let(nil, ::T.untyped)
  CharcoalDrawingPreview = ::T.let(nil, ::T.untyped)
  ChebyshevKernel = ::T.let(nil, ::T.untyped)
  CheckerTileVirtualPixelMethod = ::T.let(nil, ::T.untyped)
  ChiNegative = ::T.let(nil, ::T.untyped)
  ChiValue = ::T.let(nil, ::T.untyped)
  ClearCompositeOp = ::T.let(nil, ::T.untyped)
  CloseIntensityMorphology = ::T.let(nil, ::T.untyped)
  CloseMorphology = ::T.let(nil, ::T.untyped)
  CoalesceLayer = ::T.let(nil, ::T.untyped)
  ColorBurnCompositeOp = ::T.let(nil, ::T.untyped)
  ColorDodgeCompositeOp = ::T.let(nil, ::T.untyped)
  ColorSeparationAlphaType = ::T.let(nil, ::T.untyped)
  ColorSeparationType = ::T.let(nil, ::T.untyped)
  ColorizeCompositeOp = ::T.let(nil, ::T.untyped)
  CometKernel = ::T.let(nil, ::T.untyped)
  CompareAnyLayer = ::T.let(nil, ::T.untyped)
  CompareClearLayer = ::T.let(nil, ::T.untyped)
  CompareOverlayLayer = ::T.let(nil, ::T.untyped)
  CompassKernel = ::T.let(nil, ::T.untyped)
  CompositeLayer = ::T.let(nil, ::T.untyped)
  CondensedStretch = ::T.let(nil, ::T.untyped)
  ConvexHullKernel = ::T.let(nil, ::T.untyped)
  ConvolveMorphology = ::T.let(nil, ::T.untyped)
  CopyAlphaChannel = ::T.let(nil, ::T.untyped)
  CopyAlphaCompositeOp = ::T.let(nil, ::T.untyped)
  CopyBlackCompositeOp = ::T.let(nil, ::T.untyped)
  CopyBlueCompositeOp = ::T.let(nil, ::T.untyped)
  CopyCompositeOp = ::T.let(nil, ::T.untyped)
  CopyCyanCompositeOp = ::T.let(nil, ::T.untyped)
  CopyGreenCompositeOp = ::T.let(nil, ::T.untyped)
  CopyMagentaCompositeOp = ::T.let(nil, ::T.untyped)
  CopyRedCompositeOp = ::T.let(nil, ::T.untyped)
  CopyYellowCompositeOp = ::T.let(nil, ::T.untyped)
  CornersKernel = ::T.let(nil, ::T.untyped)
  CorrelateMorphology = ::T.let(nil, ::T.untyped)
  CorrelateNormalizeValue = ::T.let(nil, ::T.untyped)
  CosineFilter = ::T.let(nil, ::T.untyped)
  CosineQuantumOperator = ::T.let(nil, ::T.untyped)
  CrossKernel = ::T.let(nil, ::T.untyped)
  CubicFilter = ::T.let(nil, ::T.untyped)
  CyanChannel = ::T.let(nil, ::T.untyped)
  Cylinder2PlaneDistortion = ::T.let(nil, ::T.untyped)
  DXT1Compression = ::T.let(nil, ::T.untyped)
  DXT3Compression = ::T.let(nil, ::T.untyped)
  DXT5Compression = ::T.let(nil, ::T.untyped)
  DarkenCompositeOp = ::T.let(nil, ::T.untyped)
  DarkenIntensityCompositeOp = ::T.let(nil, ::T.untyped)
  DePolarDistortion = ::T.let(nil, ::T.untyped)
  DeactivateAlphaChannel = ::T.let(nil, ::T.untyped)
  DecimalValue = ::T.let(nil, ::T.untyped)
  DefaultChannels = ::T.let(nil, ::T.untyped)
  DespecklePreview = ::T.let(nil, ::T.untyped)
  DiagonalsKernel = ::T.let(nil, ::T.untyped)
  DiamondKernel = ::T.let(nil, ::T.untyped)
  DifferenceCompositeOp = ::T.let(nil, ::T.untyped)
  DilateIntensityMorphology = ::T.let(nil, ::T.untyped)
  DilateMorphology = ::T.let(nil, ::T.untyped)
  DirectClass = ::T.let(nil, ::T.untyped)
  DisassociateAlphaChannel = ::T.let(nil, ::T.untyped)
  DiskKernel = ::T.let(nil, ::T.untyped)
  DisplaceCompositeOp = ::T.let(nil, ::T.untyped)
  DisposeLayer = ::T.let(nil, ::T.untyped)
  DissolveCompositeOp = ::T.let(nil, ::T.untyped)
  DistanceMorphology = ::T.let(nil, ::T.untyped)
  DistortCompositeOp = ::T.let(nil, ::T.untyped)
  DitherVirtualPixelMethod = ::T.let(nil, ::T.untyped)
  DivideDstCompositeOp = ::T.let(nil, ::T.untyped)
  DivideQuantumOperator = ::T.let(nil, ::T.untyped)
  DivideSrcCompositeOp = ::T.let(nil, ::T.untyped)
  DoGKernel = ::T.let(nil, ::T.untyped)
  DoublePixel = ::T.let(nil, ::T.untyped)
  DstAtopCompositeOp = ::T.let(nil, ::T.untyped)
  DstCompositeOp = ::T.let(nil, ::T.untyped)
  DstInCompositeOp = ::T.let(nil, ::T.untyped)
  DstOutCompositeOp = ::T.let(nil, ::T.untyped)
  DstOverCompositeOp = ::T.let(nil, ::T.untyped)
  DullPreview = ::T.let(nil, ::T.untyped)
  EastGravity = ::T.let(nil, ::T.untyped)
  EdgeDetectPreview = ::T.let(nil, ::T.untyped)
  EdgeInMorphology = ::T.let(nil, ::T.untyped)
  EdgeMorphology = ::T.let(nil, ::T.untyped)
  EdgeOutMorphology = ::T.let(nil, ::T.untyped)
  EdgeVirtualPixelMethod = ::T.let(nil, ::T.untyped)
  EdgesKernel = ::T.let(nil, ::T.untyped)
  EndAnchor = ::T.let(nil, ::T.untyped)
  ErodeIntensityMorphology = ::T.let(nil, ::T.untyped)
  ErodeMorphology = ::T.let(nil, ::T.untyped)
  EuclideanKernel = ::T.let(nil, ::T.untyped)
  ExclusionCompositeOp = ::T.let(nil, ::T.untyped)
  ExpandedStretch = ::T.let(nil, ::T.untyped)
  ExponentialQuantumOperator = ::T.let(nil, ::T.untyped)
  ExtraCondensedStretch = ::T.let(nil, ::T.untyped)
  ExtraExpandedStretch = ::T.let(nil, ::T.untyped)
  ExtractAlphaChannel = ::T.let(nil, ::T.untyped)
  FaxCompression = ::T.let(nil, ::T.untyped)
  FillToBorderMethod = ::T.let(nil, ::T.untyped)
  FlattenLayer = ::T.let(nil, ::T.untyped)
  FloatPixel = ::T.let(nil, ::T.untyped)
  FloodfillMethod = ::T.let(nil, ::T.untyped)
  FloydSteinbergDitherMethod = ::T.let(nil, ::T.untyped)
  ForgetGravity = ::T.let(nil, ::T.untyped)
  FreiChenKernel = ::T.let(nil, ::T.untyped)
  FuzzErrorMetric = ::T.let(nil, ::T.untyped)
  GIFInterlace = ::T.let(nil, ::T.untyped)
  GRAYColorspace = ::T.let(nil, ::T.untyped)
  GammaPreview = ::T.let(nil, ::T.untyped)
  GaussianFilter = ::T.let(nil, ::T.untyped)
  GaussianKernel = ::T.let(nil, ::T.untyped)
  GaussianNoise = ::T.let(nil, ::T.untyped)
  GaussianNoiseQuantumOperator = ::T.let(nil, ::T.untyped)
  GrayChannel = ::T.let(nil, ::T.untyped)
  GrayVirtualPixelMethod = ::T.let(nil, ::T.untyped)
  GrayscaleAlphaType = ::T.let(nil, ::T.untyped)
  GrayscalePreview = ::T.let(nil, ::T.untyped)
  GrayscaleType = ::T.let(nil, ::T.untyped)
  GreaterGeometry = ::T.let(nil, ::T.untyped)
  GreaterValue = ::T.let(nil, ::T.untyped)
  GreenChannel = ::T.let(nil, ::T.untyped)
  Group4Compression = ::T.let(nil, ::T.untyped)
  HCLColorspace = ::T.let(nil, ::T.untyped)
  HCLpColorspace = ::T.let(nil, ::T.untyped)
  HSBColorspace = ::T.let(nil, ::T.untyped)
  HSIColorspace = ::T.let(nil, ::T.untyped)
  HSLColorspace = ::T.let(nil, ::T.untyped)
  HSVColorspace = ::T.let(nil, ::T.untyped)
  HWBColorspace = ::T.let(nil, ::T.untyped)
  HammingFilter = ::T.let(nil, ::T.untyped)
  HanningFilter = ::T.let(nil, ::T.untyped)
  HardLightCompositeOp = ::T.let(nil, ::T.untyped)
  HardMixCompositeOp = ::T.let(nil, ::T.untyped)
  HeightValue = ::T.let(nil, ::T.untyped)
  HermiteFilter = ::T.let(nil, ::T.untyped)
  HitAndMissMorphology = ::T.let(nil, ::T.untyped)
  HorizontalTileEdgeVirtualPixelMethod = ::T.let(nil, ::T.untyped)
  HorizontalTileVirtualPixelMethod = ::T.let(nil, ::T.untyped)
  HueChannel = ::T.let(nil, ::T.untyped)
  HueCompositeOp = ::T.let(nil, ::T.untyped)
  HuePreview = ::T.let(nil, ::T.untyped)
  IMAGEMAGICK_VERSION = ::T.let(nil, ::T.untyped)
  ImplodePreview = ::T.let(nil, ::T.untyped)
  ImpulseNoise = ::T.let(nil, ::T.untyped)
  ImpulseNoiseQuantumOperator = ::T.let(nil, ::T.untyped)
  InCompositeOp = ::T.let(nil, ::T.untyped)
  IndexChannel = ::T.let(nil, ::T.untyped)
  IntegerInterpolatePixel = ::T.let(nil, ::T.untyped)
  InverseColorInterpolate = ::T.let(nil, ::T.untyped)
  ItalicStyle = ::T.let(nil, ::T.untyped)
  IterativeDistanceMorphology = ::T.let(nil, ::T.untyped)
  JBIG1Compression = ::T.let(nil, ::T.untyped)
  JBIG2Compression = ::T.let(nil, ::T.untyped)
  JPEG2000Compression = ::T.let(nil, ::T.untyped)
  JPEGCompression = ::T.let(nil, ::T.untyped)
  JPEGInterlace = ::T.let(nil, ::T.untyped)
  JPEGPreview = ::T.let(nil, ::T.untyped)
  JincFilter = ::T.let(nil, ::T.untyped)
  KaiserFilter = ::T.let(nil, ::T.untyped)
  KirschKernel = ::T.let(nil, ::T.untyped)
  LCHColorspace = ::T.let(nil, ::T.untyped)
  LCHabColorspace = ::T.let(nil, ::T.untyped)
  LCHuvColorspace = ::T.let(nil, ::T.untyped)
  LMSColorspace = ::T.let(nil, ::T.untyped)
  LSBEndian = ::T.let(nil, ::T.untyped)
  LShiftQuantumOperator = ::T.let(nil, ::T.untyped)
  LZMACompression = ::T.let(nil, ::T.untyped)
  LZWCompression = ::T.let(nil, ::T.untyped)
  LabColorspace = ::T.let(nil, ::T.untyped)
  LagrangeFilter = ::T.let(nil, ::T.untyped)
  Lanczos2Filter = ::T.let(nil, ::T.untyped)
  Lanczos2SharpFilter = ::T.let(nil, ::T.untyped)
  LanczosFilter = ::T.let(nil, ::T.untyped)
  LanczosRadiusFilter = ::T.let(nil, ::T.untyped)
  LanczosSharpFilter = ::T.let(nil, ::T.untyped)
  LaplacianKernel = ::T.let(nil, ::T.untyped)
  LaplacianNoise = ::T.let(nil, ::T.untyped)
  LaplacianNoiseQuantumOperator = ::T.let(nil, ::T.untyped)
  LeftAlign = ::T.let(nil, ::T.untyped)
  LeftBottomOrientation = ::T.let(nil, ::T.untyped)
  LeftTopOrientation = ::T.let(nil, ::T.untyped)
  LessGeometry = ::T.let(nil, ::T.untyped)
  LessValue = ::T.let(nil, ::T.untyped)
  LightenCompositeOp = ::T.let(nil, ::T.untyped)
  LightenIntensityCompositeOp = ::T.let(nil, ::T.untyped)
  LighterWeight = ::T.let(nil, ::T.untyped)
  LineEndsKernel = ::T.let(nil, ::T.untyped)
  LineInterlace = ::T.let(nil, ::T.untyped)
  LineJunctionsKernel = ::T.let(nil, ::T.untyped)
  LineThroughDecoration = ::T.let(nil, ::T.untyped)
  LinearBurnCompositeOp = ::T.let(nil, ::T.untyped)
  LinearDodgeCompositeOp = ::T.let(nil, ::T.untyped)
  LinearLightCompositeOp = ::T.let(nil, ::T.untyped)
  LoGKernel = ::T.let(nil, ::T.untyped)
  LogColorspace = ::T.let(nil, ::T.untyped)
  LogQuantumOperator = ::T.let(nil, ::T.untyped)
  LongPixel = ::T.let(nil, ::T.untyped)
  Long_version = ::T.let(nil, ::T.untyped)
  LosslessJPEGCompression = ::T.let(nil, ::T.untyped)
  LuminizeCompositeOp = ::T.let(nil, ::T.untyped)
  LuminosityChannel = ::T.let(nil, ::T.untyped)
  LuvColorspace = ::T.let(nil, ::T.untyped)
  MAGICKCORE_QUANTUM_DEPTH = ::T.let(nil, ::T.untyped)
  MANAGED_MEMORY = ::T.let(nil, ::T.untyped)
  MSBEndian = ::T.let(nil, ::T.untyped)
  MagentaChannel = ::T.let(nil, ::T.untyped)
  Magick_features = ::T.let(nil, ::T.untyped)
  Magick_version = ::T.let(nil, ::T.untyped)
  ManhattanKernel = ::T.let(nil, ::T.untyped)
  MaskVirtualPixelMethod = ::T.let(nil, ::T.untyped)
  MathematicsCompositeOp = ::T.let(nil, ::T.untyped)
  MaxQuantumOperator = ::T.let(nil, ::T.untyped)
  MeanAbsoluteErrorMetric = ::T.let(nil, ::T.untyped)
  MeanErrorPerPixelErrorMetric = ::T.let(nil, ::T.untyped)
  MeanQuantumOperator = ::T.let(nil, ::T.untyped)
  MeanSquaredErrorMetric = ::T.let(nil, ::T.untyped)
  MedianQuantumOperator = ::T.let(nil, ::T.untyped)
  MergeLayer = ::T.let(nil, ::T.untyped)
  MeshInterpolatePixel = ::T.let(nil, ::T.untyped)
  MiddleAnchor = ::T.let(nil, ::T.untyped)
  MinQuantumOperator = ::T.let(nil, ::T.untyped)
  MinimumGeometry = ::T.let(nil, ::T.untyped)
  MinimumValue = ::T.let(nil, ::T.untyped)
  MinusDstCompositeOp = ::T.let(nil, ::T.untyped)
  MinusSrcCompositeOp = ::T.let(nil, ::T.untyped)
  MirrorVirtualPixelMethod = ::T.let(nil, ::T.untyped)
  MitchellFilter = ::T.let(nil, ::T.untyped)
  ModulateCompositeOp = ::T.let(nil, ::T.untyped)
  ModulusAddCompositeOp = ::T.let(nil, ::T.untyped)
  ModulusSubtractCompositeOp = ::T.let(nil, ::T.untyped)
  MosaicLayer = ::T.let(nil, ::T.untyped)
  MultiplicativeGaussianNoise = ::T.let(nil, ::T.untyped)
  MultiplicativeNoiseQuantumOperator = ::T.let(nil, ::T.untyped)
  MultiplyCompositeOp = ::T.let(nil, ::T.untyped)
  MultiplyQuantumOperator = ::T.let(nil, ::T.untyped)
  NearestInterpolatePixel = ::T.let(nil, ::T.untyped)
  NoCompliance = ::T.let(nil, ::T.untyped)
  NoCompositeOp = ::T.let(nil, ::T.untyped)
  NoCompression = ::T.let(nil, ::T.untyped)
  NoDecoration = ::T.let(nil, ::T.untyped)
  NoDitherMethod = ::T.let(nil, ::T.untyped)
  NoInterlace = ::T.let(nil, ::T.untyped)
  NoValue = ::T.let(nil, ::T.untyped)
  NoneDispose = ::T.let(nil, ::T.untyped)
  NormalStretch = ::T.let(nil, ::T.untyped)
  NormalStyle = ::T.let(nil, ::T.untyped)
  NormalWeight = ::T.let(nil, ::T.untyped)
  NormalizeValue = ::T.let(nil, ::T.untyped)
  NormalizedCrossCorrelationErrorMetric = ::T.let(nil, ::T.untyped)
  NorthEastGravity = ::T.let(nil, ::T.untyped)
  NorthGravity = ::T.let(nil, ::T.untyped)
  NorthWestGravity = ::T.let(nil, ::T.untyped)
  OHTAColorspace = ::T.let(nil, ::T.untyped)
  ObliqueStyle = ::T.let(nil, ::T.untyped)
  OctagonKernel = ::T.let(nil, ::T.untyped)
  OctagonalKernel = ::T.let(nil, ::T.untyped)
  OilPaintPreview = ::T.let(nil, ::T.untyped)
  OpacityChannel = ::T.let(nil, ::T.untyped)
  OpaqueAlpha = ::T.let(nil, ::T.untyped)
  OpaqueAlphaChannel = ::T.let(nil, ::T.untyped)
  OpenIntensityMorphology = ::T.let(nil, ::T.untyped)
  OpenMorphology = ::T.let(nil, ::T.untyped)
  OptimizeImageLayer = ::T.let(nil, ::T.untyped)
  OptimizeLayer = ::T.let(nil, ::T.untyped)
  OptimizePlusLayer = ::T.let(nil, ::T.untyped)
  OptimizeTransLayer = ::T.let(nil, ::T.untyped)
  OptimizeType = ::T.let(nil, ::T.untyped)
  OrQuantumOperator = ::T.let(nil, ::T.untyped)
  OutCompositeOp = ::T.let(nil, ::T.untyped)
  OverCompositeOp = ::T.let(nil, ::T.untyped)
  OverlayCompositeOp = ::T.let(nil, ::T.untyped)
  OverlineDecoration = ::T.let(nil, ::T.untyped)
  PNGInterlace = ::T.let(nil, ::T.untyped)
  PadSpread = ::T.let(nil, ::T.untyped)
  PaletteAlphaType = ::T.let(nil, ::T.untyped)
  PaletteBilevelAlphaType = ::T.let(nil, ::T.untyped)
  PaletteType = ::T.let(nil, ::T.untyped)
  PartitionInterlace = ::T.let(nil, ::T.untyped)
  ParzenFilter = ::T.let(nil, ::T.untyped)
  PeakAbsoluteErrorMetric = ::T.let(nil, ::T.untyped)
  PeakSignalToNoiseRatioErrorMetric = ::T.let(nil, ::T.untyped)
  PeaksKernel = ::T.let(nil, ::T.untyped)
  PegtopLightCompositeOp = ::T.let(nil, ::T.untyped)
  PercentGeometry = ::T.let(nil, ::T.untyped)
  PercentValue = ::T.let(nil, ::T.untyped)
  PerceptualHashErrorMetric = ::T.let(nil, ::T.untyped)
  PerceptualIntent = ::T.let(nil, ::T.untyped)
  PerspectiveDistortion = ::T.let(nil, ::T.untyped)
  PerspectiveProjectionDistortion = ::T.let(nil, ::T.untyped)
  PinLightCompositeOp = ::T.let(nil, ::T.untyped)
  PixelsPerCentimeterResolution = ::T.let(nil, ::T.untyped)
  PixelsPerInchResolution = ::T.let(nil, ::T.untyped)
  PizCompression = ::T.let(nil, ::T.untyped)
  Plane2CylinderDistortion = ::T.let(nil, ::T.untyped)
  PlaneInterlace = ::T.let(nil, ::T.untyped)
  PlusCompositeOp = ::T.let(nil, ::T.untyped)
  PlusKernel = ::T.let(nil, ::T.untyped)
  PointFilter = ::T.let(nil, ::T.untyped)
  PointMethod = ::T.let(nil, ::T.untyped)
  PoissonNoise = ::T.let(nil, ::T.untyped)
  PoissonNoiseQuantumOperator = ::T.let(nil, ::T.untyped)
  PolarDistortion = ::T.let(nil, ::T.untyped)
  PolynomialDistortion = ::T.let(nil, ::T.untyped)
  PolynomialFunction = ::T.let(nil, ::T.untyped)
  PowQuantumOperator = ::T.let(nil, ::T.untyped)
  PreviousDispose = ::T.let(nil, ::T.untyped)
  PrewittKernel = ::T.let(nil, ::T.untyped)
  PseudoClass = ::T.let(nil, ::T.untyped)
  PsiNegative = ::T.let(nil, ::T.untyped)
  PsiValue = ::T.let(nil, ::T.untyped)
  Pxr24Compression = ::T.let(nil, ::T.untyped)
  QuadraticFilter = ::T.let(nil, ::T.untyped)
  QuantizePreview = ::T.let(nil, ::T.untyped)
  QuantumPixel = ::T.let(nil, ::T.untyped)
  QuantumRange = ::T.let(nil, ::T.untyped)
  RGBColorspace = ::T.let(nil, ::T.untyped)
  RLECompression = ::T.let(nil, ::T.untyped)
  RShiftQuantumOperator = ::T.let(nil, ::T.untyped)
  RaisePreview = ::T.let(nil, ::T.untyped)
  RandomNoise = ::T.let(nil, ::T.untyped)
  RandomVirtualPixelMethod = ::T.let(nil, ::T.untyped)
  Rec601YCbCrColorspace = ::T.let(nil, ::T.untyped)
  Rec709YCbCrColorspace = ::T.let(nil, ::T.untyped)
  RectangleKernel = ::T.let(nil, ::T.untyped)
  RedChannel = ::T.let(nil, ::T.untyped)
  ReduceNoisePreview = ::T.let(nil, ::T.untyped)
  ReflectSpread = ::T.let(nil, ::T.untyped)
  RelativeIntent = ::T.let(nil, ::T.untyped)
  RemoveAlphaChannel = ::T.let(nil, ::T.untyped)
  RemoveDupsLayer = ::T.let(nil, ::T.untyped)
  RemoveZeroLayer = ::T.let(nil, ::T.untyped)
  RepeatSpread = ::T.let(nil, ::T.untyped)
  ReplaceCompositeOp = ::T.let(nil, ::T.untyped)
  ReplaceMethod = ::T.let(nil, ::T.untyped)
  ResetMethod = ::T.let(nil, ::T.untyped)
  ResizeDistortion = ::T.let(nil, ::T.untyped)
  RhoValue = ::T.let(nil, ::T.untyped)
  RidgesKernel = ::T.let(nil, ::T.untyped)
  RiemersmaDitherMethod = ::T.let(nil, ::T.untyped)
  RightAlign = ::T.let(nil, ::T.untyped)
  RightBottomOrientation = ::T.let(nil, ::T.untyped)
  RightTopOrientation = ::T.let(nil, ::T.untyped)
  RingKernel = ::T.let(nil, ::T.untyped)
  RobertsKernel = ::T.let(nil, ::T.untyped)
  RobidouxFilter = ::T.let(nil, ::T.untyped)
  RobidouxSharpFilter = ::T.let(nil, ::T.untyped)
  RollPreview = ::T.let(nil, ::T.untyped)
  RootMeanSquareQuantumOperator = ::T.let(nil, ::T.untyped)
  RootMeanSquaredErrorMetric = ::T.let(nil, ::T.untyped)
  RotatePreview = ::T.let(nil, ::T.untyped)
  SRGBColorspace = ::T.let(nil, ::T.untyped)
  SVGCompliance = ::T.let(nil, ::T.untyped)
  SaturateCompositeOp = ::T.let(nil, ::T.untyped)
  SaturationChannel = ::T.let(nil, ::T.untyped)
  SaturationIntent = ::T.let(nil, ::T.untyped)
  SaturationPreview = ::T.let(nil, ::T.untyped)
  ScRGBColorspace = ::T.let(nil, ::T.untyped)
  ScaleRotateTranslateDistortion = ::T.let(nil, ::T.untyped)
  ScreenCompositeOp = ::T.let(nil, ::T.untyped)
  SegmentPreview = ::T.let(nil, ::T.untyped)
  SemiCondensedStretch = ::T.let(nil, ::T.untyped)
  SemiExpandedStretch = ::T.let(nil, ::T.untyped)
  SentinelDistortion = ::T.let(nil, ::T.untyped)
  SeparatorValue = ::T.let(nil, ::T.untyped)
  SetAlphaChannel = ::T.let(nil, ::T.untyped)
  SetQuantumOperator = ::T.let(nil, ::T.untyped)
  ShadePreview = ::T.let(nil, ::T.untyped)
  ShapeAlphaChannel = ::T.let(nil, ::T.untyped)
  SharpenPreview = ::T.let(nil, ::T.untyped)
  ShearPreview = ::T.let(nil, ::T.untyped)
  ShepardsColorInterpolate = ::T.let(nil, ::T.untyped)
  ShepardsDistortion = ::T.let(nil, ::T.untyped)
  ShortPixel = ::T.let(nil, ::T.untyped)
  SigmaValue = ::T.let(nil, ::T.untyped)
  SincFastFilter = ::T.let(nil, ::T.untyped)
  SincFilter = ::T.let(nil, ::T.untyped)
  SineQuantumOperator = ::T.let(nil, ::T.untyped)
  SinusoidFunction = ::T.let(nil, ::T.untyped)
  SkeletonKernel = ::T.let(nil, ::T.untyped)
  SmoothMorphology = ::T.let(nil, ::T.untyped)
  SobelKernel = ::T.let(nil, ::T.untyped)
  SoftLightCompositeOp = ::T.let(nil, ::T.untyped)
  SolarizePreview = ::T.let(nil, ::T.untyped)
  SouthEastGravity = ::T.let(nil, ::T.untyped)
  SouthGravity = ::T.let(nil, ::T.untyped)
  SouthWestGravity = ::T.let(nil, ::T.untyped)
  SpiffPreview = ::T.let(nil, ::T.untyped)
  SplineFilter = ::T.let(nil, ::T.untyped)
  SplineInterpolatePixel = ::T.let(nil, ::T.untyped)
  SpreadPreview = ::T.let(nil, ::T.untyped)
  SquareKernel = ::T.let(nil, ::T.untyped)
  SrcAtopCompositeOp = ::T.let(nil, ::T.untyped)
  SrcCompositeOp = ::T.let(nil, ::T.untyped)
  SrcInCompositeOp = ::T.let(nil, ::T.untyped)
  SrcOutCompositeOp = ::T.let(nil, ::T.untyped)
  SrcOverCompositeOp = ::T.let(nil, ::T.untyped)
  StartAnchor = ::T.let(nil, ::T.untyped)
  SubtractQuantumOperator = ::T.let(nil, ::T.untyped)
  SumQuantumOperator = ::T.let(nil, ::T.untyped)
  SwirlPreview = ::T.let(nil, ::T.untyped)
  ThickenMorphology = ::T.let(nil, ::T.untyped)
  ThinSEKernel = ::T.let(nil, ::T.untyped)
  ThinningMorphology = ::T.let(nil, ::T.untyped)
  ThresholdBlackQuantumOperator = ::T.let(nil, ::T.untyped)
  ThresholdCompositeOp = ::T.let(nil, ::T.untyped)
  ThresholdPreview = ::T.let(nil, ::T.untyped)
  ThresholdQuantumOperator = ::T.let(nil, ::T.untyped)
  ThresholdWhiteQuantumOperator = ::T.let(nil, ::T.untyped)
  TileVirtualPixelMethod = ::T.let(nil, ::T.untyped)
  TopHatMorphology = ::T.let(nil, ::T.untyped)
  TopLeftOrientation = ::T.let(nil, ::T.untyped)
  TopRightOrientation = ::T.let(nil, ::T.untyped)
  TransparentAlpha = ::T.let(nil, ::T.untyped)
  TransparentAlphaChannel = ::T.let(nil, ::T.untyped)
  TransparentColorspace = ::T.let(nil, ::T.untyped)
  TransparentVirtualPixelMethod = ::T.let(nil, ::T.untyped)
  TriangleFilter = ::T.let(nil, ::T.untyped)
  TrimBoundsLayer = ::T.let(nil, ::T.untyped)
  TrueColorAlphaType = ::T.let(nil, ::T.untyped)
  TrueColorType = ::T.let(nil, ::T.untyped)
  UltraCondensedStretch = ::T.let(nil, ::T.untyped)
  UltraExpandedStretch = ::T.let(nil, ::T.untyped)
  UndefinedAlign = ::T.let(nil, ::T.untyped)
  UndefinedAlphaChannel = ::T.let(nil, ::T.untyped)
  UndefinedChannel = ::T.let(nil, ::T.untyped)
  UndefinedClass = ::T.let(nil, ::T.untyped)
  UndefinedColorInterpolate = ::T.let(nil, ::T.untyped)
  UndefinedColorspace = ::T.let(nil, ::T.untyped)
  UndefinedCompliance = ::T.let(nil, ::T.untyped)
  UndefinedCompositeOp = ::T.let(nil, ::T.untyped)
  UndefinedCompression = ::T.let(nil, ::T.untyped)
  UndefinedDispose = ::T.let(nil, ::T.untyped)
  UndefinedDistortion = ::T.let(nil, ::T.untyped)
  UndefinedDitherMethod = ::T.let(nil, ::T.untyped)
  UndefinedEndian = ::T.let(nil, ::T.untyped)
  UndefinedErrorMetric = ::T.let(nil, ::T.untyped)
  UndefinedFilter = ::T.let(nil, ::T.untyped)
  UndefinedFunction = ::T.let(nil, ::T.untyped)
  UndefinedGravity = ::T.let(nil, ::T.untyped)
  UndefinedIntent = ::T.let(nil, ::T.untyped)
  UndefinedInterlace = ::T.let(nil, ::T.untyped)
  UndefinedInterpolatePixel = ::T.let(nil, ::T.untyped)
  UndefinedKernel = ::T.let(nil, ::T.untyped)
  UndefinedLayer = ::T.let(nil, ::T.untyped)
  UndefinedMorphology = ::T.let(nil, ::T.untyped)
  UndefinedOrientation = ::T.let(nil, ::T.untyped)
  UndefinedPixel = ::T.let(nil, ::T.untyped)
  UndefinedPreview = ::T.let(nil, ::T.untyped)
  UndefinedQuantumOperator = ::T.let(nil, ::T.untyped)
  UndefinedResolution = ::T.let(nil, ::T.untyped)
  UndefinedSpread = ::T.let(nil, ::T.untyped)
  UndefinedType = ::T.let(nil, ::T.untyped)
  UndefinedVirtualPixelMethod = ::T.let(nil, ::T.untyped)
  UnderlineDecoration = ::T.let(nil, ::T.untyped)
  UniformNoise = ::T.let(nil, ::T.untyped)
  UniformNoiseQuantumOperator = ::T.let(nil, ::T.untyped)
  UnityKernel = ::T.let(nil, ::T.untyped)
  UserDefinedKernel = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
  VerticalTileEdgeVirtualPixelMethod = ::T.let(nil, ::T.untyped)
  VerticalTileVirtualPixelMethod = ::T.let(nil, ::T.untyped)
  VividLightCompositeOp = ::T.let(nil, ::T.untyped)
  VoronoiColorInterpolate = ::T.let(nil, ::T.untyped)
  VoronoiMorphology = ::T.let(nil, ::T.untyped)
  WavePreview = ::T.let(nil, ::T.untyped)
  WelshFilter = ::T.let(nil, ::T.untyped)
  WestGravity = ::T.let(nil, ::T.untyped)
  WhiteVirtualPixelMethod = ::T.let(nil, ::T.untyped)
  WidthValue = ::T.let(nil, ::T.untyped)
  X11Compliance = ::T.let(nil, ::T.untyped)
  XNegative = ::T.let(nil, ::T.untyped)
  XPMCompliance = ::T.let(nil, ::T.untyped)
  XValue = ::T.let(nil, ::T.untyped)
  XYZColorspace = ::T.let(nil, ::T.untyped)
  XiNegative = ::T.let(nil, ::T.untyped)
  XiValue = ::T.let(nil, ::T.untyped)
  XorCompositeOp = ::T.let(nil, ::T.untyped)
  XorQuantumOperator = ::T.let(nil, ::T.untyped)
  XyYColorspace = ::T.let(nil, ::T.untyped)
  YCCColorspace = ::T.let(nil, ::T.untyped)
  YCbCrColorspace = ::T.let(nil, ::T.untyped)
  YDbDrColorspace = ::T.let(nil, ::T.untyped)
  YIQColorspace = ::T.let(nil, ::T.untyped)
  YNegative = ::T.let(nil, ::T.untyped)
  YPbPrColorspace = ::T.let(nil, ::T.untyped)
  YUVColorspace = ::T.let(nil, ::T.untyped)
  YValue = ::T.let(nil, ::T.untyped)
  YellowChannel = ::T.let(nil, ::T.untyped)
  ZipCompression = ::T.let(nil, ::T.untyped)
  ZipSCompression = ::T.let(nil, ::T.untyped)
end

class Magick::DestroyedImageError
end

class Magick::DestroyedImageError
end

class Magick::Draw
  ALIGN_TYPE_NAMES = ::T.let(nil, ::T.untyped)
  ANCHOR_TYPE_NAMES = ::T.let(nil, ::T.untyped)
  DECORATION_TYPE_NAMES = ::T.let(nil, ::T.untyped)
  FONT_WEIGHT_NAMES = ::T.let(nil, ::T.untyped)
  GRAVITY_NAMES = ::T.let(nil, ::T.untyped)
  PAINT_METHOD_NAMES = ::T.let(nil, ::T.untyped)
  STRETCH_TYPE_NAMES = ::T.let(nil, ::T.untyped)
  STYLE_TYPE_NAMES = ::T.let(nil, ::T.untyped)
end

class Magick::Enum
  include ::Comparable
end

class Magick::FatalImageMagickError
end

class Magick::FatalImageMagickError
end

class Magick::Geometry
  FLAGS = ::T.let(nil, ::T.untyped)
  H = ::T.let(nil, ::T.untyped)
  RE = ::T.let(nil, ::T.untyped)
  RFLAGS = ::T.let(nil, ::T.untyped)
  W = ::T.let(nil, ::T.untyped)
  X = ::T.let(nil, ::T.untyped)
  Y = ::T.let(nil, ::T.untyped)
end

module Magick::IPTC::Application
  Abstract = ::T.let(nil, ::T.untyped)
  Action_Advised = ::T.let(nil, ::T.untyped)
  Audio_Duration = ::T.let(nil, ::T.untyped)
  Audio_Outcue = ::T.let(nil, ::T.untyped)
  Audio_Sampling_Rate = ::T.let(nil, ::T.untyped)
  Audio_Sampling_Resolution = ::T.let(nil, ::T.untyped)
  Audio_Type = ::T.let(nil, ::T.untyped)
  Author = ::T.let(nil, ::T.untyped)
  Author_Position = ::T.let(nil, ::T.untyped)
  By_Line = ::T.let(nil, ::T.untyped)
  By_Line_Title = ::T.let(nil, ::T.untyped)
  Caption = ::T.let(nil, ::T.untyped)
  Caption_Writer = ::T.let(nil, ::T.untyped)
  Category = ::T.let(nil, ::T.untyped)
  City = ::T.let(nil, ::T.untyped)
  Contact = ::T.let(nil, ::T.untyped)
  Content_Location_Code = ::T.let(nil, ::T.untyped)
  Content_Location_Name = ::T.let(nil, ::T.untyped)
  Copyright_Notice = ::T.let(nil, ::T.untyped)
  Country_Primary_Location_Code = ::T.let(nil, ::T.untyped)
  Country_Primary_Location_Name = ::T.let(nil, ::T.untyped)
  Credit = ::T.let(nil, ::T.untyped)
  Date_Created = ::T.let(nil, ::T.untyped)
  Digital_Creation_Date = ::T.let(nil, ::T.untyped)
  Digital_Creation_Time = ::T.let(nil, ::T.untyped)
  Edit_Status = ::T.let(nil, ::T.untyped)
  Editor = ::T.let(nil, ::T.untyped)
  Editorial_Update = ::T.let(nil, ::T.untyped)
  Expiration_Date = ::T.let(nil, ::T.untyped)
  Expiration_Time = ::T.let(nil, ::T.untyped)
  Fixture_Identifier = ::T.let(nil, ::T.untyped)
  Headline = ::T.let(nil, ::T.untyped)
  Image_Orientation = ::T.let(nil, ::T.untyped)
  Image_Type = ::T.let(nil, ::T.untyped)
  Keywords = ::T.let(nil, ::T.untyped)
  Language_Identifier = ::T.let(nil, ::T.untyped)
  ObjectData_Preview_Data = ::T.let(nil, ::T.untyped)
  ObjectData_Preview_File_Format = ::T.let(nil, ::T.untyped)
  ObjectData_Preview_File_Format_Version = ::T.let(nil, ::T.untyped)
  Object_Cycle = ::T.let(nil, ::T.untyped)
  Object_Name = ::T.let(nil, ::T.untyped)
  Object_Type_Reference = ::T.let(nil, ::T.untyped)
  Original_Transmission_Reference = ::T.let(nil, ::T.untyped)
  Originating_Program = ::T.let(nil, ::T.untyped)
  Program_Version = ::T.let(nil, ::T.untyped)
  Province = ::T.let(nil, ::T.untyped)
  Rasterized_Caption = ::T.let(nil, ::T.untyped)
  Record_Version = ::T.let(nil, ::T.untyped)
  Reference_Date = ::T.let(nil, ::T.untyped)
  Reference_Number = ::T.let(nil, ::T.untyped)
  Reference_Service = ::T.let(nil, ::T.untyped)
  Release_Date = ::T.let(nil, ::T.untyped)
  Release_Time = ::T.let(nil, ::T.untyped)
  Source = ::T.let(nil, ::T.untyped)
  Special_Instructions = ::T.let(nil, ::T.untyped)
  State = ::T.let(nil, ::T.untyped)
  Sub_Location = ::T.let(nil, ::T.untyped)
  Subject_Reference = ::T.let(nil, ::T.untyped)
  Supplemental_Category = ::T.let(nil, ::T.untyped)
  Time_Created = ::T.let(nil, ::T.untyped)
  Title = ::T.let(nil, ::T.untyped)
  Urgency = ::T.let(nil, ::T.untyped)
end

module Magick::IPTC::Envelope
  ARM_Identifier = ::T.let(nil, ::T.untyped)
  ARM_Version = ::T.let(nil, ::T.untyped)
  Coded_Character_Set = ::T.let(nil, ::T.untyped)
  Date_Sent = ::T.let(nil, ::T.untyped)
  Destination = ::T.let(nil, ::T.untyped)
  Envelope_Number = ::T.let(nil, ::T.untyped)
  Envelope_Priority = ::T.let(nil, ::T.untyped)
  File_Format = ::T.let(nil, ::T.untyped)
  File_Format_Version = ::T.let(nil, ::T.untyped)
  Model_Version = ::T.let(nil, ::T.untyped)
  Product_ID = ::T.let(nil, ::T.untyped)
  Service_Identifier = ::T.let(nil, ::T.untyped)
  Time_Sent = ::T.let(nil, ::T.untyped)
  UNO = ::T.let(nil, ::T.untyped)
  Unique_Name_of_Object = ::T.let(nil, ::T.untyped)
end

module Magick::IPTC::ObjectData
  Subfile = ::T.let(nil, ::T.untyped)
end

module Magick::IPTC::Post_ObjectData_Descriptor
  Confirmed_ObjectData_Size = ::T.let(nil, ::T.untyped)
end

module Magick::IPTC::Pre_ObjectData_Descriptor
  Max_Subfile_Size = ::T.let(nil, ::T.untyped)
  Maximum_ObjectData_Size = ::T.let(nil, ::T.untyped)
  ObjectData_Size_Announced = ::T.let(nil, ::T.untyped)
  Size_Mode = ::T.let(nil, ::T.untyped)
end

class Magick::Pixel
  include ::Comparable
end

module MethodSource
  VERSION = ::T.let(nil, ::T.untyped)
end

module MethodSource::CodeHelpers::IncompleteExpression
  GENERIC_REGEXPS = ::T.let(nil, ::T.untyped)
  RBX_ONLY_REGEXPS = ::T.let(nil, ::T.untyped)
end

module MiniMagick::Configuration
  CLI_DETECTION = ::T.let(nil, ::T.untyped)
end

class MiniMagick::Image::Info
  ASCII_ENCODED_EXIF_KEYS = ::T.let(nil, ::T.untyped)
end

class MiniMagick::Tool
  CREATION_OPERATORS = ::T.let(nil, ::T.untyped)
end

module MiniMagick::VERSION
  MAJOR = ::T.let(nil, ::T.untyped)
  MINOR = ::T.let(nil, ::T.untyped)
  PRE = ::T.let(nil, ::T.untyped)
  STRING = ::T.let(nil, ::T.untyped)
  TINY = ::T.let(nil, ::T.untyped)
end

MiniTest = Minitest

module Minitest
  ENCS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module Minitest::Assertions
  E = ::T.let(nil, ::T.untyped)
  UNDEFINED = ::T.let(nil, ::T.untyped)
end

class Minitest::BacktraceFilter
  MT_RE = ::T.let(nil, ::T.untyped)
end

class Minitest::Runnable
  SIGNALS = ::T.let(nil, ::T.untyped)
end

class Minitest::Spec
  TYPES = ::T.let(nil, ::T.untyped)
end

module Minitest::Spec::DSL
  TYPES = ::T.let(nil, ::T.untyped)
end

class Minitest::Test
  PASSTHROUGH_EXCEPTIONS = ::T.let(nil, ::T.untyped)
  TEARDOWN_METHODS = ::T.let(nil, ::T.untyped)
end

class Minitest::Unit
  VERSION = ::T.let(nil, ::T.untyped)
end

class Monitor
  def enter(); end

  def exit(); end

  def try_enter(); end
end

module MonitorMixin
  def initialize(*args); end
  EXCEPTION_IMMEDIATE = ::T.let(nil, ::T.untyped)
  EXCEPTION_NEVER = ::T.let(nil, ::T.untyped)
end

class MonitorMixin::ConditionVariable
  def initialize(monitor); end
end

class Movable::Move
  def self.[](*_); end

  def self.members(); end
end

module Mutex_m
  VERSION = ::T.let(nil, ::T.untyped)
end

class NameError
  include ::DidYouMean::Correctable
end

class Net::BufferedIO
  def write_timeout(); end

  def write_timeout=(write_timeout); end
end

class Net::HTTP
  def max_retries(); end

  def max_retries=(retries); end

  def max_version(); end

  def max_version=(max_version); end

  def min_version(); end

  def min_version=(min_version); end

  def write_timeout(); end

  def write_timeout=(sec); end
  ENVIRONMENT_VARIABLE_IS_MULTIUSER_SAFE = ::T.let(nil, ::T.untyped)
end

class Net::HTTPAlreadyReported
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPAlreadyReported
end

Net::HTTPClientError::EXCEPTION_TYPE = Net::HTTPServerException

Net::HTTPClientErrorCode = Net::HTTPClientError

Net::HTTPClientException = Net::HTTPServerException

class Net::HTTPEarlyHints
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPEarlyHints
end

Net::HTTPFatalErrorCode = Net::HTTPClientError

class Net::HTTPGatewayTimeout
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPGatewayTimeout
end

Net::HTTPInformationCode = Net::HTTPInformation

class Net::HTTPLoopDetected
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPLoopDetected
end

class Net::HTTPMisdirectedRequest
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPMisdirectedRequest
end

Net::HTTPMovedTemporarily = Net::HTTPFound

Net::HTTPMultipleChoice = Net::HTTPMultipleChoices

class Net::HTTPNotExtended
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPNotExtended
end

class Net::HTTPPayloadTooLarge
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPPayloadTooLarge
end

class Net::HTTPProcessing
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPProcessing
end

class Net::HTTPRangeNotSatisfiable
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPRangeNotSatisfiable
end

Net::HTTPRedirection::EXCEPTION_TYPE = Net::HTTPRetriableError

Net::HTTPRedirectionCode = Net::HTTPRedirection

class Net::HTTPRequestTimeout
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPRequestTimeout
end

Net::HTTPRequestURITooLarge = Net::HTTPURITooLong

Net::HTTPResponceReceiver = Net::HTTPResponse

Net::HTTPRetriableCode = Net::HTTPRedirection

Net::HTTPServerError::EXCEPTION_TYPE = Net::HTTPFatalError

Net::HTTPServerErrorCode = Net::HTTPServerError

Net::HTTPSession = Net::HTTP

Net::HTTPSuccess::EXCEPTION_TYPE = Net::HTTPError

Net::HTTPSuccessCode = Net::HTTPSuccess

class Net::HTTPURITooLong
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPURITooLong
end

Net::HTTPUnknownResponse::EXCEPTION_TYPE = Net::HTTPError

class Net::HTTPVariantAlsoNegotiates
  HAS_BODY = ::T.let(nil, ::T.untyped)
end

class Net::HTTPVariantAlsoNegotiates
end

Net::NetPrivate::HTTPRequest = Net::HTTPRequest

Net::NetPrivate::Socket = Net::InternetMessageIO

Net::ProtocRetryError = Net::ProtoRetriableError

class Net::ReadTimeout
  def initialize(io=T.unsafe(nil)); end

  def io(); end
end

class Net::WriteTimeout
  def initialize(io=T.unsafe(nil)); end

  def io(); end
end

class NilClass
  include ::JSON::Ext::Generator::GeneratorMethods::NilClass
end

class Object
  include ::JSON::Ext::Generator::GeneratorMethods::Object
  include ::PP::ObjectMixin
  include ::RequireAll
  def to_yaml(options=T.unsafe(nil)); end
  ARGF = ::T.let(nil, ::T.untyped)
  ARGV = ::T.let(nil, ::T.untyped)
  CROSS_COMPILING = ::T.let(nil, ::T.untyped)
  ENV = ::T.let(nil, ::T.untyped)
  RUBY_COPYRIGHT = ::T.let(nil, ::T.untyped)
  RUBY_DESCRIPTION = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE = ::T.let(nil, ::T.untyped)
  RUBY_ENGINE_VERSION = ::T.let(nil, ::T.untyped)
  RUBY_PATCHLEVEL = ::T.let(nil, ::T.untyped)
  RUBY_PLATFORM = ::T.let(nil, ::T.untyped)
  RUBY_RELEASE_DATE = ::T.let(nil, ::T.untyped)
  RUBY_REVISION = ::T.let(nil, ::T.untyped)
  RUBY_VERSION = ::T.let(nil, ::T.untyped)
  STDERR = ::T.let(nil, ::T.untyped)
  STDIN = ::T.let(nil, ::T.untyped)
  STDOUT = ::T.let(nil, ::T.untyped)
  TOPLEVEL_BINDING = ::T.let(nil, ::T.untyped)
end

class Object
  def self.yaml_tag(url); end
end

class OpenSSL::ASN1::ASN1Data
  def indefinite_length(); end

  def indefinite_length=(indefinite_length); end
end

class OpenSSL::BN
  def +@(); end

  def -@(); end

  def /(_); end

  def negative?(); end
end

module OpenSSL::KDF
end

class OpenSSL::KDF::KDFError
end

class OpenSSL::KDF::KDFError
end

module OpenSSL::KDF
  def self.hkdf(*_); end

  def self.pbkdf2_hmac(*_); end

  def self.scrypt(*_); end
end

class OpenSSL::OCSP::Request
  def signed?(); end
end

OpenSSL::PKCS7::Signer = OpenSSL::PKCS7::SignerInfo

class OpenSSL::PKey::EC
  EXPLICIT_CURVE = ::T.let(nil, ::T.untyped)
end

class OpenSSL::PKey::EC::Point
  def to_octet_string(_); end
end

module OpenSSL::SSL
  OP_ALLOW_NO_DHE_KEX = ::T.let(nil, ::T.untyped)
  OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_CRYPTOPRO_TLSEXT_BUG = ::T.let(nil, ::T.untyped)
  OP_LEGACY_SERVER_CONNECT = ::T.let(nil, ::T.untyped)
  OP_NO_ENCRYPT_THEN_MAC = ::T.let(nil, ::T.untyped)
  OP_NO_RENEGOTIATION = ::T.let(nil, ::T.untyped)
  OP_NO_TLSv1_3 = ::T.let(nil, ::T.untyped)
  OP_SAFARI_ECDHE_ECDSA_BUG = ::T.let(nil, ::T.untyped)
  OP_TLSEXT_PADDING = ::T.let(nil, ::T.untyped)
  SSL2_VERSION = ::T.let(nil, ::T.untyped)
  SSL3_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_1_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_2_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_3_VERSION = ::T.let(nil, ::T.untyped)
  TLS1_VERSION = ::T.let(nil, ::T.untyped)
end

class OpenSSL::SSL::SSLContext
  def add_certificate(*_); end

  def alpn_protocols(); end

  def alpn_protocols=(alpn_protocols); end

  def alpn_select_cb(); end

  def alpn_select_cb=(alpn_select_cb); end

  def enable_fallback_scsv(); end

  def max_version=(version); end

  def min_version=(version); end
  DEFAULT_TMP_DH_CALLBACK = ::T.let(nil, ::T.untyped)
end

class OpenSSL::SSL::SSLSocket
  def alpn_protocol(); end

  def tmp_key(); end
end

module OpenSSL::X509
  V_FLAG_NO_CHECK_TIME = ::T.let(nil, ::T.untyped)
  V_FLAG_TRUSTED_FIRST = ::T.let(nil, ::T.untyped)
end

class OpenSSL::X509::Attribute
  def ==(other); end
end

class OpenSSL::X509::CRL
  def ==(other); end
end

class OpenSSL::X509::Extension
  def ==(other); end
end

class OpenSSL::X509::Name
  def to_utf8(); end
end

class OpenSSL::X509::Request
  def ==(other); end
end

class OpenSSL::X509::Revoked
  def ==(other); end

  def to_der(); end
end

module OpenSSL
  def self.fips_mode(); end
end

class OpenURI::Buffer
  def <<(str); end

  def io(); end

  def size(); end
  StringMax = ::T.let(nil, ::T.untyped)
end

class OpenURI::Buffer
end

class OpenURI::HTTPError
  def initialize(message, io); end
end

class OpenURI::HTTPRedirect
  def initialize(message, io, uri); end
end

module OpenURI::Meta
  def content_type_parse(); end

  def meta_add_field(name, value); end

  def meta_add_field2(name, values); end

  def meta_setup_encoding(); end
  RE_LWS = ::T.let(nil, ::T.untyped)
  RE_PARAMETERS = ::T.let(nil, ::T.untyped)
  RE_QUOTED_STRING = ::T.let(nil, ::T.untyped)
  RE_TOKEN = ::T.let(nil, ::T.untyped)
end

module OpenURI::Meta
  def self.init(obj, src=T.unsafe(nil)); end
end

module OpenURI
  def self.check_options(options); end

  def self.open_http(buf, target, proxy, options); end

  def self.open_loop(uri, options); end

  def self.open_uri(name, *rest); end

  def self.redirectable?(uri1, uri2); end

  def self.scan_open_optional_arguments(*rest); end
end

module Parallel
  Stop = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Parallel::UserInterruptHandler
  INTERRUPT_SIGNAL = ::T.let(nil, ::T.untyped)
end

ParseError = Racc::ParseError

module Parser
  MESSAGES = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Parser::Diagnostic
  LEVELS = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer
  ESCAPES = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  KEYWORDS_BEGIN = ::T.let(nil, ::T.untyped)
  LEX_STATES = ::T.let(nil, ::T.untyped)
  PUNCTUATION = ::T.let(nil, ::T.untyped)
  PUNCTUATION_BEGIN = ::T.let(nil, ::T.untyped)
  REGEXP_META_CHARACTERS = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer::Dedenter
  TAB_WIDTH = ::T.let(nil, ::T.untyped)
end

class Parser::Lexer::Literal
  DELIMITERS = ::T.let(nil, ::T.untyped)
  TYPES = ::T.let(nil, ::T.untyped)
end

module Parser::Meta
  NODE_TYPES = ::T.let(nil, ::T.untyped)
end

class Parser::Rewriter
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
end

class Parser::Ruby24
  Racc_arg = ::T.let(nil, ::T.untyped)
  Racc_debug_parser = ::T.let(nil, ::T.untyped)
  Racc_token_to_s_table = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Buffer
  ENCODING_RE = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Comment::Associator
  MAGIC_COMMENT_RE = ::T.let(nil, ::T.untyped)
  POSTFIX_TYPES = ::T.let(nil, ::T.untyped)
end

class Parser::Source::Rewriter
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
end

class Parser::Source::TreeRewriter
  ACTIONS = ::T.let(nil, ::T.untyped)
  DEPRECATION_WARNING = ::T.let(nil, ::T.untyped)
  POLICY_TO_LEVEL = ::T.let(nil, ::T.untyped)
end

class Parser::StaticEnvironment
  FORWARD_ARGS = ::T.let(nil, ::T.untyped)
end

class Pathname
  def fnmatch?(*_); end

  def glob(*_); end

  def make_symlink(_); end
end

class Proc
  def <<(_); end

  def >>(_); end

  def clone(); end
end

class ProgressBar::Components::Bar
  DEFAULT_PROGRESS_MARK = ::T.let(nil, ::T.untyped)
  DEFAULT_REMAINDER_MARK = ::T.let(nil, ::T.untyped)
  DEFAULT_UPA_STEPS = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Components::Time
  ELAPSED_LABEL = ::T.let(nil, ::T.untyped)
  ESTIMATED_LABEL = ::T.let(nil, ::T.untyped)
  NO_TIME_ELAPSED_TEXT = ::T.let(nil, ::T.untyped)
  OOB_FRIENDLY_TIME_TEXT = ::T.let(nil, ::T.untyped)
  OOB_LIMIT_IN_HOURS = ::T.let(nil, ::T.untyped)
  OOB_TIME_FORMATS = ::T.let(nil, ::T.untyped)
  OOB_UNKNOWN_TIME_TEXT = ::T.let(nil, ::T.untyped)
  TIME_FORMAT = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Components::Title
  DEFAULT_TITLE = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Format::Molecule
  BAR_MOLECULES = ::T.let(nil, ::T.untyped)
  MOLECULES = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Format::String
  ANSI_SGR_PATTERN = ::T.let(nil, ::T.untyped)
  MOLECULE_PATTERN = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Output
  DEFAULT_OUTPUT_STREAM = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Outputs::NonTty
  DEFAULT_FORMAT_STRING = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Outputs::Tty
  DEFAULT_FORMAT_STRING = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Progress
  DEFAULT_BEGINNING_POSITION = ::T.let(nil, ::T.untyped)
  DEFAULT_SMOOTHING = ::T.let(nil, ::T.untyped)
  DEFAULT_TOTAL = ::T.let(nil, ::T.untyped)
end

class ProgressBar::Time
  TIME_MOCKING_LIBRARY_METHODS = ::T.let(nil, ::T.untyped)
end

class Pry
  BINDING_METHOD_IMPL = ::T.let(nil, ::T.untyped)
  CLIPPED_PRINT = ::T.let(nil, ::T.untyped)
  Commands = ::T.let(nil, ::T.untyped)
  DEFAULT_CONTROL_D_HANDLER = ::T.let(nil, ::T.untyped)
  DEFAULT_EXCEPTION_HANDLER = ::T.let(nil, ::T.untyped)
  DEFAULT_EXCEPTION_WHITELIST = ::T.let(nil, ::T.untyped)
  DEFAULT_HOOKS = ::T.let(nil, ::T.untyped)
  DEFAULT_PRINT = ::T.let(nil, ::T.untyped)
  DEFAULT_SYSTEM = ::T.let(nil, ::T.untyped)
  EMPTY_COMPLETIONS = ::T.let(nil, ::T.untyped)
  HOME_RC_FILE = ::T.let(nil, ::T.untyped)
  LOCAL_RC_FILE = ::T.let(nil, ::T.untyped)
  SIMPLE_PRINT = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

Pry::BasicObject::Kernel = Kernel

Pry::BasicObject::Pry = Pry

class Pry::Code
  extend ::MethodSource::CodeHelpers
end

class Pry::CodeFile
  DEFAULT_EXT = ::T.let(nil, ::T.untyped)
  EXTENSIONS = ::T.let(nil, ::T.untyped)
  FILES = ::T.let(nil, ::T.untyped)
  INITIAL_PWD = ::T.let(nil, ::T.untyped)
end

class Pry::ColorPrinter
  OBJ_COLOR = ::T.let(nil, ::T.untyped)
end

class Pry::Command
  VOID_VALUE = ::T.let(nil, ::T.untyped)
end

class Pry::Command::GemSearch
  API_ENDPOINT = ::T.let(nil, ::T.untyped)
end

class Pry::Command::GemStat
  FAIL_WHALE = ::T.let(nil, ::T.untyped)
  STAT_HOST = ::T.let(nil, ::T.untyped)
  STAT_PATH = ::T.let(nil, ::T.untyped)
  STAT_PORT = ::T.let(nil, ::T.untyped)
end

class Pry::Command::Ls
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

class Pry::Command::Ls::Constants
  DEPRECATED_CONSTANTS = ::T.let(nil, ::T.untyped)
end

class Pry::Command::Ls::Globals
  BUILTIN_GLOBALS = ::T.let(nil, ::T.untyped)
  PSEUDO_GLOBALS = ::T.let(nil, ::T.untyped)
end

module Pry::Config::Behavior
  ASSIGNMENT = ::T.let(nil, ::T.untyped)
  INSPECT_REGEXP = ::T.let(nil, ::T.untyped)
  NODUP = ::T.let(nil, ::T.untyped)
end

module Pry::Config::Convenience
  SHORTCUTS = ::T.let(nil, ::T.untyped)
end

module Pry::Config::Memoization
  MEMOIZED_METHODS = ::T.let(nil, ::T.untyped)
end

module Pry::Helpers::Text
  COLORS = ::T.let(nil, ::T.untyped)
end

class Pry::Indent
  IGNORE_TOKENS = ::T.let(nil, ::T.untyped)
  MIDWAY_TOKENS = ::T.let(nil, ::T.untyped)
  OPEN_TOKENS = ::T.let(nil, ::T.untyped)
  OPTIONAL_DO_TOKENS = ::T.let(nil, ::T.untyped)
  SINGLELINE_TOKENS = ::T.let(nil, ::T.untyped)
  SPACES = ::T.let(nil, ::T.untyped)
  STATEMENT_END_TOKENS = ::T.let(nil, ::T.untyped)
end

class Pry::Inspector
  MAP = ::T.let(nil, ::T.untyped)
end

class Pry::ObjectPath
  SPECIAL_TERMS = ::T.let(nil, ::T.untyped)
end

class Pry::PluginManager
  PRY_PLUGIN_PREFIX = ::T.let(nil, ::T.untyped)
end

module Pry::Prompt
  DEFAULT_NAME = ::T.let(nil, ::T.untyped)
  SAFE_CONTEXTS = ::T.let(nil, ::T.untyped)
end

class Pry::Slop
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Pry::Slop::Option
  DEFAULT_OPTIONS = ::T.let(nil, ::T.untyped)
end

module Psych
  VERSION = ::T.let(nil, ::T.untyped)
end

module Psych
  def self.add_builtin_type(type_tag, &block); end

  def self.add_domain_type(domain, type_tag, &block); end

  def self.add_tag(tag, klass); end

  def self.domain_types(); end

  def self.domain_types=(domain_types); end

  def self.dump_tags(); end

  def self.dump_tags=(dump_tags); end

  def self.libyaml_version(); end

  def self.load_tags(); end

  def self.load_tags=(load_tags); end

  def self.remove_type(type_tag); end
end

class REXML::Parsers::BaseParser
  QNAME = ::T.let(nil, ::T.untyped)
  QNAME_STR = ::T.let(nil, ::T.untyped)
end

class REXML::Parsers::XPathParser
  LOCAL_NAME_WILDCARD = ::T.let(nil, ::T.untyped)
  PREFIX_WILDCARD = ::T.let(nil, ::T.untyped)
end

class REXML::XPathParser
  DEBUG = ::T.let(nil, ::T.untyped)
end

module Racc
  Racc_No_Extensions = ::T.let(nil, ::T.untyped)
end

class Racc::CparseParams
end

class Racc::CparseParams
end

class Racc::Parser
  Racc_Main_Parsing_Routine = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Id_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Revision = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Revision_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Revision_R = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version_C = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Core_Version_R = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Revision = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Type = ::T.let(nil, ::T.untyped)
  Racc_Runtime_Version = ::T.let(nil, ::T.untyped)
  Racc_YY_Parse_Method = ::T.let(nil, ::T.untyped)
end

class Random
  def self.bytes(_); end
end

class Range
  def %(_); end

  def entries(); end

  def to_a(); end
end

module RbConfig
  def self.expand(val, config=T.unsafe(nil)); end

  def self.fire_update!(key, val, mkconf=T.unsafe(nil), conf=T.unsafe(nil)); end

  def self.ruby(); end
end

class Regexp
  TOKEN_KEYS = ::T.let(nil, ::T.untyped)
end

Regexp::Expression::Alternation::OPERAND = Regexp::Expression::Alternative

Regexp::Expression::Anchor::BOL = Regexp::Expression::Anchor::BeginningOfLine

Regexp::Expression::Anchor::BOS = Regexp::Expression::Anchor::BeginningOfString

Regexp::Expression::Anchor::EOL = Regexp::Expression::Anchor::EndOfLine

Regexp::Expression::Anchor::EOS = Regexp::Expression::Anchor::EndOfString

Regexp::Expression::Anchor::EOSobEOL = Regexp::Expression::Anchor::EndOfStringOrBeforeEndOfLine

Regexp::Expression::CharacterSet::Intersection::OPERAND = Regexp::Expression::CharacterSet::IntersectedSequence

Regexp::Expression::MatchLength = Regexp::MatchLength

class Regexp::Expression::Quantifier
  MODES = ::T.let(nil, ::T.untyped)
end

class Regexp::Lexer
  CLOSING_TOKENS = ::T.let(nil, ::T.untyped)
  OPENING_TOKENS = ::T.let(nil, ::T.untyped)
end

class Regexp::Parser
  ENC_FLAGS = ::T.let(nil, ::T.untyped)
  MOD_FLAGS = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

class Regexp::Scanner
  PROP_MAPS_DIR = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax
  VERSION_CONST_REGEXP = ::T.let(nil, ::T.untyped)
  VERSION_FORMAT = ::T.let(nil, ::T.untyped)
  VERSION_REGEXP = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token
  All = ::T.let(nil, ::T.untyped)
  Map = ::T.let(nil, ::T.untyped)
  Types = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Anchor
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  MatchStart = ::T.let(nil, ::T.untyped)
  String = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Assertion
  All = ::T.let(nil, ::T.untyped)
  Lookahead = ::T.let(nil, ::T.untyped)
  Lookbehind = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Backreference
  All = ::T.let(nil, ::T.untyped)
  Name = ::T.let(nil, ::T.untyped)
  Number = ::T.let(nil, ::T.untyped)
  RecursionLevel = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::CharacterSet
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::CharacterType
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Clustered = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Hex = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Conditional
  All = ::T.let(nil, ::T.untyped)
  Condition = ::T.let(nil, ::T.untyped)
  Delimiters = ::T.let(nil, ::T.untyped)
  Separator = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Escape
  ASCII = ::T.let(nil, ::T.untyped)
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Control = ::T.let(nil, ::T.untyped)
  Hex = ::T.let(nil, ::T.untyped)
  Meta = ::T.let(nil, ::T.untyped)
  Octal = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
  Unicode = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::FreeSpace
  All = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Group
  All = ::T.let(nil, ::T.untyped)
  Atomic = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Comment = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Named = ::T.let(nil, ::T.untyped)
  Passive = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
  V1_8_6 = ::T.let(nil, ::T.untyped)
  V2_4_1 = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Keep
  All = ::T.let(nil, ::T.untyped)
  Mark = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Literal
  All = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Meta
  All = ::T.let(nil, ::T.untyped)
  Basic = ::T.let(nil, ::T.untyped)
  Extended = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::PosixClass
  All = ::T.let(nil, ::T.untyped)
  Extensions = ::T.let(nil, ::T.untyped)
  NonType = ::T.let(nil, ::T.untyped)
  Standard = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::Quantifier
  All = ::T.let(nil, ::T.untyped)
  Greedy = ::T.let(nil, ::T.untyped)
  Interval = ::T.let(nil, ::T.untyped)
  IntervalAll = ::T.let(nil, ::T.untyped)
  IntervalPossessive = ::T.let(nil, ::T.untyped)
  IntervalReluctant = ::T.let(nil, ::T.untyped)
  Possessive = ::T.let(nil, ::T.untyped)
  Reluctant = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::SubexpressionCall
  All = ::T.let(nil, ::T.untyped)
  Name = ::T.let(nil, ::T.untyped)
  Number = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::UnicodeProperty
  Age = ::T.let(nil, ::T.untyped)
  Age_V1_9_3 = ::T.let(nil, ::T.untyped)
  Age_V2_0_0 = ::T.let(nil, ::T.untyped)
  Age_V2_2_0 = ::T.let(nil, ::T.untyped)
  Age_V2_3_0 = ::T.let(nil, ::T.untyped)
  Age_V2_4_0 = ::T.let(nil, ::T.untyped)
  Age_V2_5_0 = ::T.let(nil, ::T.untyped)
  Age_V2_6_0 = ::T.let(nil, ::T.untyped)
  Age_V2_6_2 = ::T.let(nil, ::T.untyped)
  Age_V2_6_3 = ::T.let(nil, ::T.untyped)
  All = ::T.let(nil, ::T.untyped)
  CharType_V1_9_0 = ::T.let(nil, ::T.untyped)
  CharType_V2_5_0 = ::T.let(nil, ::T.untyped)
  Derived = ::T.let(nil, ::T.untyped)
  Derived_V1_9_0 = ::T.let(nil, ::T.untyped)
  Derived_V2_0_0 = ::T.let(nil, ::T.untyped)
  Derived_V2_4_0 = ::T.let(nil, ::T.untyped)
  Derived_V2_5_0 = ::T.let(nil, ::T.untyped)
  Emoji = ::T.let(nil, ::T.untyped)
  Emoji_V2_5_0 = ::T.let(nil, ::T.untyped)
  NonType = ::T.let(nil, ::T.untyped)
  POSIX = ::T.let(nil, ::T.untyped)
  Script = ::T.let(nil, ::T.untyped)
  Script_V1_9_0 = ::T.let(nil, ::T.untyped)
  Script_V1_9_3 = ::T.let(nil, ::T.untyped)
  Script_V2_0_0 = ::T.let(nil, ::T.untyped)
  Script_V2_2_0 = ::T.let(nil, ::T.untyped)
  Script_V2_3_0 = ::T.let(nil, ::T.untyped)
  Script_V2_4_0 = ::T.let(nil, ::T.untyped)
  Script_V2_5_0 = ::T.let(nil, ::T.untyped)
  Script_V2_6_0 = ::T.let(nil, ::T.untyped)
  Script_V2_6_2 = ::T.let(nil, ::T.untyped)
  Type = ::T.let(nil, ::T.untyped)
  UnicodeBlock = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V1_9_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_0_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_2_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_3_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_4_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_5_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_6_0 = ::T.let(nil, ::T.untyped)
  UnicodeBlock_V2_6_2 = ::T.let(nil, ::T.untyped)
  V1_9_0 = ::T.let(nil, ::T.untyped)
  V1_9_3 = ::T.let(nil, ::T.untyped)
  V2_0_0 = ::T.let(nil, ::T.untyped)
  V2_2_0 = ::T.let(nil, ::T.untyped)
  V2_3_0 = ::T.let(nil, ::T.untyped)
  V2_4_0 = ::T.let(nil, ::T.untyped)
  V2_5_0 = ::T.let(nil, ::T.untyped)
  V2_6_0 = ::T.let(nil, ::T.untyped)
  V2_6_2 = ::T.let(nil, ::T.untyped)
  V2_6_3 = ::T.let(nil, ::T.untyped)
end

module Regexp::Syntax::Token::UnicodeProperty::Category
  All = ::T.let(nil, ::T.untyped)
  Codepoint = ::T.let(nil, ::T.untyped)
  Letter = ::T.let(nil, ::T.untyped)
  Mark = ::T.let(nil, ::T.untyped)
  Number = ::T.let(nil, ::T.untyped)
  Punctuation = ::T.let(nil, ::T.untyped)
  Separator = ::T.let(nil, ::T.untyped)
  Symbol = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS
  def extract_resources(msg, name, typeclass); end

  def getname(address); end
  RequestID = ::T.let(nil, ::T.untyped)
  RequestIDMutex = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Config
  def initialize(config_info=T.unsafe(nil)); end
end

class Resolv::DNS::Label::Str
  def initialize(string); end
end

class Resolv::DNS::Message
  def initialize(id=T.unsafe(nil)); end
end

class Resolv::DNS::Message::MessageDecoder
  def initialize(data); end
end

class Resolv::DNS::Requester::ConnectedUDP
  def initialize(host, port=T.unsafe(nil)); end

  def lazy_initialize(); end
end

class Resolv::DNS::Requester::Sender
  def initialize(msg, data, sock); end
end

class Resolv::DNS::Requester::TCP
  def initialize(host, port=T.unsafe(nil)); end
end

class Resolv::DNS::Requester::UnconnectedUDP
  def initialize(*nameserver_port); end

  def lazy_initialize(); end
end

class Resolv::DNS::Requester::UnconnectedUDP::Sender
  def initialize(msg, data, sock, host, port); end
end

class Resolv::DNS::Resource
  ClassValue = ::T.let(nil, ::T.untyped)
end

class Resolv::DNS::Resource::LOC
  def initialize(version, ssize, hprecision, vprecision, latitude, longitude, altitude); end
end

class Resolv::DNS
  def self.allocate_request_id(host, port); end

  def self.bind_random_port(udpsock, bind_host=T.unsafe(nil)); end

  def self.free_request_id(host, port, id); end

  def self.random(arg); end
end

class RuboCop::AST::ArrayNode
  PERCENT_LITERAL_TYPES = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::BlockNode
  VOID_CONTEXT_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::Builder
  NODE_MAP = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::CollectionNode
  ARRAY_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::KeywordSplatNode
  DOUBLE_SPLAT = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::MethodDispatchNode
  ARITHMETIC_OPERATORS = ::T.let(nil, ::T.untyped)
  SPECIAL_MODIFIERS = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::MethodIdentifierPredicates
  ENUMERABLE_METHODS = ::T.let(nil, ::T.untyped)
  ENUMERATOR_METHODS = ::T.let(nil, ::T.untyped)
  NONMUTATING_ARRAY_METHODS = ::T.let(nil, ::T.untyped)
  NONMUTATING_BINARY_OPERATOR_METHODS = ::T.let(nil, ::T.untyped)
  NONMUTATING_HASH_METHODS = ::T.let(nil, ::T.untyped)
  NONMUTATING_OPERATOR_METHODS = ::T.let(nil, ::T.untyped)
  NONMUTATING_STRING_METHODS = ::T.let(nil, ::T.untyped)
  NONMUTATING_UNARY_OPERATOR_METHODS = ::T.let(nil, ::T.untyped)
  OPERATOR_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::Node
  ARGUMENT_TYPES = ::T.let(nil, ::T.untyped)
  ASSIGNMENTS = ::T.let(nil, ::T.untyped)
  BASIC_CONDITIONALS = ::T.let(nil, ::T.untyped)
  BASIC_LITERALS = ::T.let(nil, ::T.untyped)
  COMPARISON_OPERATORS = ::T.let(nil, ::T.untyped)
  COMPOSITE_LITERALS = ::T.let(nil, ::T.untyped)
  CONDITIONALS = ::T.let(nil, ::T.untyped)
  EQUALS_ASSIGNMENTS = ::T.let(nil, ::T.untyped)
  FALSEY_LITERALS = ::T.let(nil, ::T.untyped)
  IMMUTABLE_LITERALS = ::T.let(nil, ::T.untyped)
  KEYWORDS = ::T.let(nil, ::T.untyped)
  LITERALS = ::T.let(nil, ::T.untyped)
  LOOP_TYPES = ::T.let(nil, ::T.untyped)
  MUTABLE_LITERALS = ::T.let(nil, ::T.untyped)
  OPERATOR_KEYWORDS = ::T.let(nil, ::T.untyped)
  POST_CONDITION_LOOP_TYPES = ::T.let(nil, ::T.untyped)
  REFERENCES = ::T.let(nil, ::T.untyped)
  SHORTHAND_ASSIGNMENTS = ::T.let(nil, ::T.untyped)
  SPECIAL_KEYWORDS = ::T.let(nil, ::T.untyped)
  TRUTHY_LITERALS = ::T.let(nil, ::T.untyped)
  VARIABLES = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::NumericNode
  SIGN_REGEX = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::PairNode
  COLON = ::T.let(nil, ::T.untyped)
  HASH_ROCKET = ::T.let(nil, ::T.untyped)
  SPACED_COLON = ::T.let(nil, ::T.untyped)
  SPACED_HASH_ROCKET = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::PredicateOperatorNode
  LOGICAL_AND = ::T.let(nil, ::T.untyped)
  LOGICAL_OR = ::T.let(nil, ::T.untyped)
  SEMANTIC_AND = ::T.let(nil, ::T.untyped)
  SEMANTIC_OR = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::ProcessedSource
  STRING_SOURCE_NAME = ::T.let(nil, ::T.untyped)
end

class RuboCop::AST::RegexpNode
  OPTIONS = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::Traversal
  MANY_CHILD_NODES = ::T.let(nil, ::T.untyped)
  NO_CHILD_NODES = ::T.let(nil, ::T.untyped)
  ONE_CHILD_NODE = ::T.let(nil, ::T.untyped)
  SECOND_CHILD_ONLY = ::T.let(nil, ::T.untyped)
end

module RuboCop::AST::Version
  STRING = ::T.let(nil, ::T.untyped)
end

class RuboCop::CLI::Command::AutoGenerateConfig
  AUTO_GENERATED_FILE = ::T.let(nil, ::T.untyped)
end

class RuboCop::Config
  DEFAULT_RAILS_VERSION = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::ConstantResolution
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Lint::FormatParameterMismatch
  MSG_INVALID = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Metrics::Utils::CodeLengthCalculator
  CLASSISH_TYPES = ::T.let(nil, ::T.untyped)
  FOLDABLE_TYPES = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::Metrics::Utils::IteratingBlock
  KNOWN_ITERATING_METHODS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::AsciiIdentifiers
  CONSTANT_MSG = ::T.let(nil, ::T.untyped)
  IDENTIFIER_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Naming::BinaryOperatorParameterName
  EXCLUDED = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Offense
  NO_LOCATION = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Sorbet::EnforceSigilOrder
  CODING_REGEX = ::T.let(nil, ::T.untyped)
  FROZEN_REGEX = ::T.let(nil, ::T.untyped)
  INDENT_REGEX = ::T.let(nil, ::T.untyped)
  MAGIC_REGEX = ::T.let(nil, ::T.untyped)
  PREFERRED_ORDER = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Sorbet::ForbidIncludeConstLiteral
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Sorbet::ForbidSuperclassConstLiteral
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Sorbet::ForbidUntypedStructProps
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Sorbet::SignatureBuildOrder
  ORDER = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Sorbet::ValidSigil
  SIGIL_REGEX = ::T.let(nil, ::T.untyped)
  STRICTNESS_LEVELS = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::AccessorGrouping
  ACCESSOR_METHODS = ::T.let(nil, ::T.untyped)
  GROUPED_MSG = ::T.let(nil, ::T.untyped)
  SEPARATED_MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::BisectedAttrAccessor
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantAssignment
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantConditional
  COMPARISON_OPERATOR_MATCHER = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantFetchBlock
  MSG = ::T.let(nil, ::T.untyped)
end

class RuboCop::Cop::Style::RedundantSelf
  KEYWORDS = ::T.let(nil, ::T.untyped)
end

module RuboCop::Cop::VisibilityHelp
  VISIBILITY_SCOPES = ::T.let(nil, ::T.untyped)
end

RuboCop::NodePattern = RuboCop::AST::NodePattern

RuboCop::ProcessedSource = RuboCop::AST::ProcessedSource

module RuboCop::Sorbet
  CONFIG = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

RuboCop::Token = RuboCop::AST::Token

module RubyVM::AbstractSyntaxTree
end

class RubyVM::AbstractSyntaxTree::Node
  def children(); end

  def first_column(); end

  def first_lineno(); end

  def last_column(); end

  def last_lineno(); end

  def pretty_print_children(q, names=T.unsafe(nil)); end

  def type(); end
end

class RubyVM::AbstractSyntaxTree::Node
end

module RubyVM::AbstractSyntaxTree
  def self.of(_); end

  def self.parse(_); end

  def self.parse_file(_); end
end

module RubyVM::MJIT
end

module RubyVM::MJIT
  def self.enabled?(); end

  def self.pause(*_); end

  def self.resume(); end
end

class RubyVM
  def self.resolve_feature_path(_); end
end

module SWIG
end

class SWIG::Pointer
end

class SWIG::Pointer
end

class SWIG::TYPE_p_Gosu__Button
end

class SWIG::TYPE_p_Gosu__Button
end

class SWIG::TYPE_p_Gosu__Channel
end

class SWIG::TYPE_p_Gosu__Channel
end

class SWIG::TYPE_p_Gosu__Color
end

class SWIG::TYPE_p_Gosu__Color
end

class SWIG::TYPE_p_Gosu__Font
end

class SWIG::TYPE_p_Gosu__Font
end

class SWIG::TYPE_p_Gosu__GLTexInfo
end

class SWIG::TYPE_p_Gosu__GLTexInfo
end

class SWIG::TYPE_p_Gosu__Image
end

class SWIG::TYPE_p_Gosu__Image
end

class SWIG::TYPE_p_Gosu__Sample
end

class SWIG::TYPE_p_Gosu__Sample
end

class SWIG::TYPE_p_Gosu__Song
end

class SWIG::TYPE_p_Gosu__Song
end

class SWIG::TYPE_p_Gosu__TextInput
end

class SWIG::TYPE_p_Gosu__TextInput
end

class SWIG::TYPE_p_Gosu__Window
end

class SWIG::TYPE_p_Gosu__Window
end

class SWIG::TYPE_p_char
end

class SWIG::TYPE_p_char
end

class SWIG::TYPE_p_double
end

class SWIG::TYPE_p_double
end

class SWIG::TYPE_p_std__arrayT_double_16_t
end

class SWIG::TYPE_p_std__arrayT_double_16_t
end

class SWIG::TYPE_p_std__string
end

class SWIG::TYPE_p_std__string
end

module SWIG
end

ScanError = StringScanner::Error

class Set
  def ==(other); end

  def ===(o); end

  def compare_by_identity(); end

  def compare_by_identity?(); end

  def divide(&func); end

  def eql?(o); end

  def flatten_merge(set, seen=T.unsafe(nil)); end

  def pretty_print(pp); end

  def pretty_print_cycle(pp); end

  def reset(); end
  InspectKey = ::T.let(nil, ::T.untyped)
end

class SimpleDelegator
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Socket
  IPV6_DONTFRAG = ::T.let(nil, ::T.untyped)
  IPV6_PATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_RECVPATHMTU = ::T.let(nil, ::T.untyped)
  SO_BPF_EXTENSIONS = ::T.let(nil, ::T.untyped)
end

module Socket::Constants
  IPV6_DONTFRAG = ::T.let(nil, ::T.untyped)
  IPV6_PATHMTU = ::T.let(nil, ::T.untyped)
  IPV6_RECVPATHMTU = ::T.let(nil, ::T.untyped)
  SO_BPF_EXTENSIONS = ::T.let(nil, ::T.untyped)
end

class SortedSet
  def initialize(*args, &block); end
end

class SortedSet
  def self.setup(); end
end

class String
  include ::JSON::Ext::Generator::GeneratorMethods::String
  def shellescape(); end

  def shellsplit(); end
end

class StringScanner
  def bol?(); end

  def initialize(*_); end
  Id = ::T.let(nil, ::T.untyped)
  Version = ::T.let(nil, ::T.untyped)
end

class Struct
  def filter(*_); end
end

Struct::Group = Etc::Group

Struct::Passwd = Etc::Passwd

Struct::Tms = Process::Tms

class Tempfile
  def _close(); end

  def inspect(); end
  RUBYGEMS_ACTIVATION_MONITOR = ::T.let(nil, ::T.untyped)
end

class Tempfile::Remover
  def call(*args); end

  def initialize(tmpfile); end
end

class Tempfile::Remover
end

class Test
  extend ::T::Private::Methods::MethodHooks
  extend ::T::Private::Methods::SingletonMethodHooks
end

class TracePoint
  def __enable(_, _1); end

  def eval_script(); end

  def instruction_sequence(); end

  def parameters(); end
end

class TrueClass
  include ::JSON::Ext::Generator::GeneratorMethods::TrueClass
end

module URI
  include ::URI::RFC2396_REGEXP
end

class URI::FTP
  def buffer_open(buf, proxy, options); end
end

class URI::FTP
  def self.new2(user, password, host, port, path, typecode=T.unsafe(nil), arg_check=T.unsafe(nil)); end
end

class URI::File
  def check_password(user); end

  def check_user(user); end

  def check_userinfo(user); end

  def set_userinfo(v); end
  COMPONENT = ::T.let(nil, ::T.untyped)
  DEFAULT_PORT = ::T.let(nil, ::T.untyped)
end

class URI::File
end

class URI::HTTP
  def buffer_open(buf, proxy, options); end
end

class URI::LDAP
  def attributes(); end

  def attributes=(val); end

  def dn(); end

  def dn=(val); end

  def extensions(); end

  def extensions=(val); end

  def filter(); end

  def filter=(val); end

  def initialize(*arg); end

  def scope(); end

  def scope=(val); end

  def set_attributes(val); end

  def set_dn(val); end

  def set_extensions(val); end

  def set_filter(val); end

  def set_scope(val); end
end

class URI::MailTo
  def initialize(*arg); end
end

URI::Parser = URI::RFC2396_Parser

URI::REGEXP = URI::RFC2396_REGEXP

class URI::RFC2396_Parser
  def initialize(opts=T.unsafe(nil)); end
end

class URI::RFC3986_Parser
  def join(*uris); end

  def parse(uri); end

  def regexp(); end

  def split(uri); end
  RFC3986_relative_ref = ::T.let(nil, ::T.untyped)
end

module URI::Util
  def self.make_components_hash(klass, array_hash); end
end

module URI
  extend ::URI::Escape
  def self.get_encoding(label); end
end

module Unicode::DisplayWidth
  DATA_DIRECTORY = ::T.let(nil, ::T.untyped)
  DEPTHS = ::T.let(nil, ::T.untyped)
  INDEX = ::T.let(nil, ::T.untyped)
  INDEX_FILENAME = ::T.let(nil, ::T.untyped)
  NO_STRING_EXT = ::T.let(nil, ::T.untyped)
  UNICODE_VERSION = ::T.let(nil, ::T.untyped)
  VERSION = ::T.let(nil, ::T.untyped)
end

module UnicodeNormalize
end

module UnicodeNormalize
end

module Warning
  extend ::Warning
end

class Zlib::Deflate
  def initialize(*_); end
end

class Zlib::GzipReader
  def initialize(*_); end
end

class Zlib::GzipWriter
  def initialize(*_); end
end

class Zlib::Inflate
  def initialize(*_); end
end
